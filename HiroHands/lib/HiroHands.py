# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_HiroHands', [dirname(__file__)])
        except ImportError:
            import _HiroHands
            return _HiroHands
        if fp is not None:
            try:
                _mod = imp.load_module('_HiroHands', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _HiroHands = swig_import_helper()
    del swig_import_helper
else:
    import _HiroHands
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class fAray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fAray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fAray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _HiroHands.new_fAray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _HiroHands.delete_fAray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _HiroHands.fAray___getitem__(self, *args)
    def __setitem__(self, *args): return _HiroHands.fAray___setitem__(self, *args)
    def cast(self): return _HiroHands.fAray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _HiroHands.fAray_frompointer
    if _newclass:frompointer = staticmethod(_HiroHands.fAray_frompointer)
fAray_swigregister = _HiroHands.fAray_swigregister
fAray_swigregister(fAray)

def fAray_frompointer(*args):
  return _HiroHands.fAray_frompointer(*args)
fAray_frompointer = _HiroHands.fAray_frompointer

class HiroHand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HiroHand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HiroHand, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def setRange(self, *args): return _HiroHands.HiroHand_setRange(self, *args)
    def servoON(self): return _HiroHands.HiroHand_servoON(self)
    def servoBRAKE(self): return _HiroHands.HiroHand_servoBRAKE(self)
    def servoOFF(self): return _HiroHands.HiroHand_servoOFF(self)
    def close(self, *args): return _HiroHands.HiroHand_close(self, *args)
    def setPose(self, *args): return _HiroHands.HiroHand_setPose(self, *args)
    def getCompParam(self, *args): return _HiroHands.HiroHand_getCompParam(self, *args)
    def setCompParam(self, *args): return _HiroHands.HiroHand_setCompParam(self, *args)
    def readAngle(self, *args): return _HiroHands.HiroHand_readAngle(self, *args)
HiroHand_swigregister = _HiroHands.HiroHand_swigregister
HiroHand_swigregister(HiroHand)

class HiroHands(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HiroHands, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HiroHands, name)
    __repr__ = _swig_repr
    RH00 = _HiroHands.HiroHands_RH00
    RH01 = _HiroHands.HiroHands_RH01
    RH10 = _HiroHands.HiroHands_RH10
    RH11 = _HiroHands.HiroHands_RH11
    LH00 = _HiroHands.HiroHands_LH00
    LH01 = _HiroHands.HiroHands_LH01
    LH10 = _HiroHands.HiroHands_LH10
    LH11 = _HiroHands.HiroHands_LH11
    DOFS = _HiroHands.HiroHands_DOFS
    __swig_setmethods__["rightHand"] = _HiroHands.HiroHands_rightHand_set
    __swig_getmethods__["rightHand"] = _HiroHands.HiroHands_rightHand_get
    if _newclass:rightHand = _swig_property(_HiroHands.HiroHands_rightHand_get, _HiroHands.HiroHands_rightHand_set)
    __swig_setmethods__["leftHand"] = _HiroHands.HiroHands_leftHand_set
    __swig_getmethods__["leftHand"] = _HiroHands.HiroHands_leftHand_get
    if _newclass:leftHand = _swig_property(_HiroHands.HiroHands_leftHand_get, _HiroHands.HiroHands_leftHand_set)
    def __init__(self, *args): 
        this = _HiroHands.new_HiroHands(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _HiroHands.delete_HiroHands
    __del__ = lambda self : None;
    def init(self, *args): return _HiroHands.HiroHands_init(self, *args)
    def release(self): return _HiroHands.HiroHands_release(self)
HiroHands_swigregister = _HiroHands.HiroHands_swigregister
HiroHands_swigregister(HiroHands)

class Logger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Logger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Logger, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _HiroHands.delete_Logger
    __del__ = lambda self : None;
    def addMessage(self, *args): return _HiroHands.Logger_addMessage(self, *args)
Logger_swigregister = _HiroHands.Logger_swigregister
Logger_swigregister(Logger)

class LoggerStderr(Logger):
    __swig_setmethods__ = {}
    for _s in [Logger]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LoggerStderr, name, value)
    __swig_getmethods__ = {}
    for _s in [Logger]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LoggerStderr, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _HiroHands.new_LoggerStderr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _HiroHands.delete_LoggerStderr
    __del__ = lambda self : None;
    def addMessage(self, *args): return _HiroHands.LoggerStderr_addMessage(self, *args)
LoggerStderr_swigregister = _HiroHands.LoggerStderr_swigregister
LoggerStderr_swigregister(LoggerStderr)



