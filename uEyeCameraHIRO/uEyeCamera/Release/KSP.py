# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_KSP', [dirname(__file__)])
        except ImportError:
            import _KSP
            return _KSP
        if fp is not None:
            try:
                _mod = imp.load_module('_KSP', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _KSP = swig_import_helper()
    del swig_import_helper
else:
    import _KSP
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _KSP.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _KSP.SwigPyIterator_value(self)
    def incr(self, n = 1): return _KSP.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _KSP.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _KSP.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _KSP.SwigPyIterator_equal(self, *args)
    def copy(self): return _KSP.SwigPyIterator_copy(self)
    def next(self): return _KSP.SwigPyIterator_next(self)
    def __next__(self): return _KSP.SwigPyIterator___next__(self)
    def previous(self): return _KSP.SwigPyIterator_previous(self)
    def advance(self, *args): return _KSP.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _KSP.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _KSP.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _KSP.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _KSP.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _KSP.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _KSP.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _KSP.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class dblArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dblArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dblArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _KSP.new_dblArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _KSP.delete_dblArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _KSP.dblArray___getitem__(self, *args)
    def __setitem__(self, *args): return _KSP.dblArray___setitem__(self, *args)
    def cast(self): return _KSP.dblArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _KSP.dblArray_frompointer
    if _newclass:frompointer = staticmethod(_KSP.dblArray_frompointer)
dblArray_swigregister = _KSP.dblArray_swigregister
dblArray_swigregister(dblArray)

def dblArray_frompointer(*args):
  return _KSP.dblArray_frompointer(*args)
dblArray_frompointer = _KSP.dblArray_frompointer

class Arm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Arm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Arm, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["speed"] = _KSP.Arm_speed_set
    __swig_getmethods__["speed"] = _KSP.Arm_speed_get
    if _newclass:speed = _swig_property(_KSP.Arm_speed_get, _KSP.Arm_speed_set)
    def setDefaultSpeed(self, *args): return _KSP.Arm_setDefaultSpeed(self, *args)
    def getAngles(self, *args): return _KSP.Arm_getAngles(self, *args)
    def makePose(self, *args): return _KSP.Arm_makePose(self, *args)
    def moveUpper(self, *args): return _KSP.Arm_moveUpper(self, *args)
    def moveUpperTo(self, *args): return _KSP.Arm_moveUpperTo(self, *args)
    def moveFore(self, *args): return _KSP.Arm_moveFore(self, *args)
    def moveForeTo(self, *args): return _KSP.Arm_moveForeTo(self, *args)
    def wait(self): return _KSP.Arm_wait(self)
Arm_swigregister = _KSP.Arm_swigregister
Arm_swigregister(Arm)
cvar = _KSP.cvar
NECK = cvar.NECK
CHEST = cvar.CHEST
RARM = cvar.RARM
LARM = cvar.LARM
WHOLE = cvar.WHOLE
DOFS_WHOLE = cvar.DOFS_WHOLE
DOFS_ARM = cvar.DOFS_ARM
DOFS_NECK = cvar.DOFS_NECK
DOFS_CHEST = cvar.DOFS_CHEST
COMPLEMENTBY_ANGLE = cvar.COMPLEMENTBY_ANGLE
COMPLEMENTBY_LINE = cvar.COMPLEMENTBY_LINE

class Hand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Hand, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["speed"] = _KSP.Hand_speed_set
    __swig_getmethods__["speed"] = _KSP.Hand_speed_get
    if _newclass:speed = _swig_property(_KSP.Hand_speed_get, _KSP.Hand_speed_set)
    def setDefaultSpeed(self, *args): return _KSP.Hand_setDefaultSpeed(self, *args)
    __swig_setmethods__["complementType"] = _KSP.Hand_complementType_set
    __swig_getmethods__["complementType"] = _KSP.Hand_complementType_get
    if _newclass:complementType = _swig_property(_KSP.Hand_complementType_get, _KSP.Hand_complementType_set)
    def setDefaultComplementType(self, *args): return _KSP.Hand_setDefaultComplementType(self, *args)
    def getCoord(self, *args): return _KSP.Hand_getCoord(self, *args)
    def move(self, *args): return _KSP.Hand_move(self, *args)
    def moveTo(self, *args): return _KSP.Hand_moveTo(self, *args)
    def resetPose(self, *args): return _KSP.Hand_resetPose(self, *args)
    def turn(self, *args): return _KSP.Hand_turn(self, *args)
    def turnTo(self, *args): return _KSP.Hand_turnTo(self, *args)
    def wait(self): return _KSP.Hand_wait(self)
Hand_swigregister = _KSP.Hand_swigregister
Hand_swigregister(Hand)

class Robot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Robot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Robot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rarm"] = _KSP.Robot_rarm_set
    __swig_getmethods__["rarm"] = _KSP.Robot_rarm_get
    if _newclass:rarm = _swig_property(_KSP.Robot_rarm_get, _KSP.Robot_rarm_set)
    __swig_setmethods__["larm"] = _KSP.Robot_larm_set
    __swig_getmethods__["larm"] = _KSP.Robot_larm_get
    if _newclass:larm = _swig_property(_KSP.Robot_larm_get, _KSP.Robot_larm_set)
    __swig_setmethods__["rhand"] = _KSP.Robot_rhand_set
    __swig_getmethods__["rhand"] = _KSP.Robot_rhand_get
    if _newclass:rhand = _swig_property(_KSP.Robot_rhand_get, _KSP.Robot_rhand_set)
    __swig_setmethods__["lhand"] = _KSP.Robot_lhand_set
    __swig_getmethods__["lhand"] = _KSP.Robot_lhand_get
    if _newclass:lhand = _swig_property(_KSP.Robot_lhand_get, _KSP.Robot_lhand_set)
    __swig_setmethods__["speed"] = _KSP.Robot_speed_set
    __swig_getmethods__["speed"] = _KSP.Robot_speed_get
    if _newclass:speed = _swig_property(_KSP.Robot_speed_get, _KSP.Robot_speed_set)
    def __init__(self, *args): 
        this = _KSP.new_Robot(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _KSP.delete_Robot
    __del__ = lambda self : None;
    def poweroff(self): return _KSP.Robot_poweroff(self)
    def jointCalib(self): return _KSP.Robot_jointCalib(self)
    def servoON(self): return _KSP.Robot_servoON(self)
    def servoOFF(self): return _KSP.Robot_servoOFF(self)
    def setDefaultSpeed(self, *args): return _KSP.Robot_setDefaultSpeed(self, *args)
    def makeEscapePose(self, *args): return _KSP.Robot_makeEscapePose(self, *args)
    def getAngles(self, *args): return _KSP.Robot_getAngles(self, *args)
    def getNeckAngles(self, *args): return _KSP.Robot_getNeckAngles(self, *args)
    def faceTo(self, *args): return _KSP.Robot_faceTo(self, *args)
    def turnNeck(self, *args): return _KSP.Robot_turnNeck(self, *args)
    def getChestAngle(self, *args): return _KSP.Robot_getChestAngle(self, *args)
    def directTo(self, *args): return _KSP.Robot_directTo(self, *args)
    def turnChest(self, *args): return _KSP.Robot_turnChest(self, *args)
    def makePose(self, *args): return _KSP.Robot_makePose(self, *args)
    def wait(self, *args): return _KSP.Robot_wait(self, *args)
    def getDin(self): return _KSP.Robot_getDin(self)
Robot_swigregister = _KSP.Robot_swigregister
Robot_swigregister(Robot)



