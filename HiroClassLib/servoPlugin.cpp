// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "servoPlugin.hpp"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



servoPlugin_ptr servoPlugin_Helper::_nil() {
  return ::servoPlugin::_nil();
}

::CORBA::Boolean servoPlugin_Helper::is_nil(::servoPlugin_ptr p) {
  return ::CORBA::is_nil(p);

}

void servoPlugin_Helper::release(::servoPlugin_ptr p) {
  ::CORBA::release(p);
}

void servoPlugin_Helper::marshalObjRef(::servoPlugin_ptr obj, cdrStream& s) {
  ::servoPlugin::_marshalObjRef(obj, s);
}

servoPlugin_ptr servoPlugin_Helper::unmarshalObjRef(cdrStream& s) {
  return ::servoPlugin::_unmarshalObjRef(s);
}

void servoPlugin_Helper::duplicate(::servoPlugin_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

servoPlugin_ptr
servoPlugin::_duplicate(::servoPlugin_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

servoPlugin_ptr
servoPlugin::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


servoPlugin_ptr
servoPlugin::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

servoPlugin_ptr
servoPlugin::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_servoPlugin _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_servoPlugin* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_servoPlugin;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* servoPlugin::_PD_repoId = "IDL:servoPlugin:1.0";


typedef OpenHRP::Plugin OpenHRP_Plugin;
typedef OpenHRP::_impl_Plugin OpenHRP__impl_Plugin;
typedef OpenHRP::_objref_Plugin OpenHRP__objref_Plugin;

typedef OpenHRP::CommandReceiver OpenHRP_CommandReceiver;
typedef OpenHRP::_impl_CommandReceiver OpenHRP__impl_CommandReceiver;
typedef OpenHRP::_objref_CommandReceiver OpenHRP__objref_CommandReceiver;

_objref_servoPlugin::~_objref_servoPlugin() {
  
}


_objref_servoPlugin::_objref_servoPlugin(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::servoPlugin::_PD_repoId, ior, id, 1),
   OpenHRP__objref_Plugin(ior, id)
   
{
  _PR_setobj(this);
}

void*
_objref_servoPlugin::_ptrToObjRef(const char* id)
{
  if( id == ::servoPlugin::_PD_repoId )
    return (::servoPlugin_ptr) this;
  if( id == ::OpenHRP::Plugin::_PD_repoId )
    return (::OpenHRP::Plugin_ptr) this;

  if( id == ::OpenHRP::CommandReceiver::_PD_repoId )
    return (::OpenHRP::CommandReceiver_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::servoPlugin::_PD_repoId) )
    return (::servoPlugin_ptr) this;
  if( omni::strMatch(id, ::OpenHRP::Plugin::_PD_repoId) )
    return (::OpenHRP::Plugin_ptr) this;

  if( omni::strMatch(id, ::OpenHRP::CommandReceiver::_PD_repoId) )
    return (::OpenHRP::CommandReceiver_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cboolean
class _0RL_cd_5004C9FD06A66DED_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_5004C9FD06A66DED_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::Boolean arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_5004C9FD06A66DED_00000000::marshalArguments(cdrStream& _n)
{
  _n.marshalBoolean(arg_0);

}

void _0RL_cd_5004C9FD06A66DED_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0 = _n.unmarshalBoolean();

}

void _0RL_cd_5004C9FD06A66DED_00000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_5004C9FD06A66DED_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_5004C9FD06A66DED_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_5004C9FD06A66DED_00000000* tcd = (_0RL_cd_5004C9FD06A66DED_00000000*)cd;
  _impl_servoPlugin* impl = (_impl_servoPlugin*) svnt->_ptrToInterface(servoPlugin::_PD_repoId);
  tcd->result = impl->switchServo(tcd->arg_0);


}

::CORBA::Boolean _objref_servoPlugin::switchServo(::CORBA::Boolean t)
{
  _0RL_cd_5004C9FD06A66DED_00000000 _call_desc(_0RL_lcfn_5004C9FD06A66DED_10000000, "switchServo", 12);
  _call_desc.arg_0 = t;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cservoPluginTypes_mLngLngSeq_i_a15_cfloat_i_a15_cboolean_o_chiroCommonStatus_mstatSequence
class _0RL_cd_5004C9FD06A66DED_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_5004C9FD06A66DED_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  servoPluginTypes::LngLngSeq_var arg_0_;
  const servoPluginTypes::LngLngSeq* arg_0;
  servoPluginTypes::FltArray15 arg_1_;
  const servoPluginTypes::FltArray15_slice* arg_1;
  servoPluginTypes::BolArray15 arg_2_;
  const servoPluginTypes::BolArray15_slice* arg_2;
  hiroCommonStatus::statSequence_var arg_3;
  ::CORBA::Boolean result;
};

void _0RL_cd_5004C9FD06A66DED_20000000::marshalArguments(cdrStream& _n)
{
  (const servoPluginTypes::LngLngSeq&) *arg_0 >>= _n;
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)((::CORBA::Float*)arg_1),60,omni::ALIGN_4);
  }
  else 
  {
    _n.declareArrayLength(omni::ALIGN_4, 60);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 15; _0i0++){
      arg_1[_0i0] >>= _n;
    }
  }

#if !defined(HAS_Cplusplus_Bool) || (SIZEOF_BOOL == 1)
  _n.put_octet_array((_CORBA_Octet*)((::CORBA::Boolean*)arg_2),15);
#else
  {
    _n.declareArrayLength(omni::ALIGN_1, 15);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 15; _0i0++){
      _n.marshalBoolean(arg_2[_0i0]);
    }
  }
#endif

}

void _0RL_cd_5004C9FD06A66DED_20000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new servoPluginTypes::LngLngSeq;
  (servoPluginTypes::LngLngSeq&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  _n.unmarshalArrayFloat((_CORBA_Float*)((::CORBA::Float*)arg_1_), 15);
  arg_1 = &arg_1_[0];
  _n.unmarshalArrayBoolean((_CORBA_Boolean*)((::CORBA::Boolean*)arg_2_), 15);
  arg_2 = &arg_2_[0];

}

void _0RL_cd_5004C9FD06A66DED_20000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);
  (const hiroCommonStatus::statSequence&) arg_3 >>= _n;

}

void _0RL_cd_5004C9FD06A66DED_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();
  arg_3 = new hiroCommonStatus::statSequence;
  (hiroCommonStatus::statSequence&)arg_3 <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_5004C9FD06A66DED_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_5004C9FD06A66DED_20000000* tcd = (_0RL_cd_5004C9FD06A66DED_20000000*)cd;
  _impl_servoPlugin* impl = (_impl_servoPlugin*) svnt->_ptrToInterface(servoPlugin::_PD_repoId);
  tcd->result = impl->jointCalibration(*tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3.out());


}

::CORBA::Boolean _objref_servoPlugin::jointCalibration(const servoPluginTypes::LngLngSeq& seq, const servoPluginTypes::FltArray15 angles, const servoPluginTypes::BolArray15 rot, hiroCommonStatus::statSequence_out status)
{
  _0RL_cd_5004C9FD06A66DED_20000000 _call_desc(_0RL_lcfn_5004C9FD06A66DED_30000000, "jointCalibration", 17);
  _call_desc.arg_0 = &(servoPluginTypes::LngLngSeq&) seq;
  _call_desc.arg_1 = &angles[0];
  _call_desc.arg_2 = &rot[0];

  _invoke(_call_desc);
  status = _call_desc.arg_3._retn();
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_o_a15_clonglong
class _0RL_cd_5004C9FD06A66DED_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_5004C9FD06A66DED_40000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  servoPluginTypes::LngArray15 arg_0_;
  servoPluginTypes::LngArray15_slice* arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_5004C9FD06A66DED_40000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)((::CORBA::LongLong*)arg_0),120,omni::ALIGN_8);
  }
  else 
  {
    _n.declareArrayLength(omni::ALIGN_8, 120);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 15; _0i0++){
      arg_0[_0i0] >>= _n;
    }
  }

}

void _0RL_cd_5004C9FD06A66DED_40000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();
  _n.unmarshalArrayLongLong((_CORBA_LongLong*)((::CORBA::LongLong*)arg_0), 15);

}

// Local call call-back function.
static void
_0RL_lcfn_5004C9FD06A66DED_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_5004C9FD06A66DED_40000000* tcd = (_0RL_cd_5004C9FD06A66DED_40000000*)cd;
  _impl_servoPlugin* impl = (_impl_servoPlugin*) svnt->_ptrToInterface(servoPlugin::_PD_repoId);
  tcd->result = impl->getStatus(tcd->arg_0);


}

::CORBA::Boolean _objref_servoPlugin::getStatus(servoPluginTypes::LngArray15 status)
{
  _0RL_cd_5004C9FD06A66DED_40000000 _call_desc(_0RL_lcfn_5004C9FD06A66DED_50000000, "getStatus", 10);
  _call_desc.arg_0 = &status[0];

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean
class _0RL_cd_5004C9FD06A66DED_60000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_5004C9FD06A66DED_60000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::Boolean result;
};

void _0RL_cd_5004C9FD06A66DED_60000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_5004C9FD06A66DED_60000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_5004C9FD06A66DED_70000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_5004C9FD06A66DED_60000000* tcd = (_0RL_cd_5004C9FD06A66DED_60000000*)cd;
  _impl_servoPlugin* impl = (_impl_servoPlugin*) svnt->_ptrToInterface(servoPlugin::_PD_repoId);
  tcd->result = impl->clearEmergency();


}

::CORBA::Boolean _objref_servoPlugin::clearEmergency()
{
  _0RL_cd_5004C9FD06A66DED_60000000 _call_desc(_0RL_lcfn_5004C9FD06A66DED_70000000, "clearEmergency", 15);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_5004C9FD06A66DED_80000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_5004C9FD06A66DED_60000000* tcd = (_0RL_cd_5004C9FD06A66DED_60000000*)cd;
  _impl_servoPlugin* impl = (_impl_servoPlugin*) svnt->_ptrToInterface(servoPlugin::_PD_repoId);
  tcd->result = impl->checkCalibration();


}

::CORBA::Boolean _objref_servoPlugin::checkCalibration()
{
  _0RL_cd_5004C9FD06A66DED_60000000 _call_desc(_0RL_lcfn_5004C9FD06A66DED_80000000, "checkCalibration", 17);


  _invoke(_call_desc);
  return _call_desc.result;


}
_pof_servoPlugin::~_pof_servoPlugin() {}


omniObjRef*
_pof_servoPlugin::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::_objref_servoPlugin(ior, id);
}


::CORBA::Boolean
_pof_servoPlugin::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::servoPlugin::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, OpenHRP::Plugin::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, OpenHRP::CommandReceiver::_PD_repoId) )
    return 1;


  return 0;
}

const _pof_servoPlugin _the_pof_servoPlugin;

_impl_servoPlugin::~_impl_servoPlugin() {}


::CORBA::Boolean
_impl_servoPlugin::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "switchServo") ) {

    _0RL_cd_5004C9FD06A66DED_00000000 _call_desc(_0RL_lcfn_5004C9FD06A66DED_10000000, "switchServo", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "jointCalibration") ) {

    _0RL_cd_5004C9FD06A66DED_20000000 _call_desc(_0RL_lcfn_5004C9FD06A66DED_30000000, "jointCalibration", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getStatus") ) {

    _0RL_cd_5004C9FD06A66DED_40000000 _call_desc(_0RL_lcfn_5004C9FD06A66DED_50000000, "getStatus", 10, 1);
    _call_desc.arg_0 = _call_desc.arg_0_;
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "clearEmergency") ) {

    _0RL_cd_5004C9FD06A66DED_60000000 _call_desc(_0RL_lcfn_5004C9FD06A66DED_70000000, "clearEmergency", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "checkCalibration") ) {

    _0RL_cd_5004C9FD06A66DED_60000000 _call_desc(_0RL_lcfn_5004C9FD06A66DED_80000000, "checkCalibration", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  
#ifndef _MSC_VER
  if( OpenHRP__impl_Plugin::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((OpenHRP__impl_Plugin*)this)->
      OpenHRP__impl_Plugin::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
_impl_servoPlugin::_ptrToInterface(const char* id)
{
  if( id == ::servoPlugin::_PD_repoId )
    return (::_impl_servoPlugin*) this;
  if( id == ::OpenHRP::Plugin::_PD_repoId )
    return (::OpenHRP::_impl_Plugin*) this;

  if( id == ::OpenHRP::CommandReceiver::_PD_repoId )
    return (::OpenHRP::_impl_CommandReceiver*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::servoPlugin::_PD_repoId) )
    return (::_impl_servoPlugin*) this;
  if( omni::strMatch(id, ::OpenHRP::Plugin::_PD_repoId) )
    return (::OpenHRP::_impl_Plugin*) this;

  if( omni::strMatch(id, ::OpenHRP::CommandReceiver::_PD_repoId) )
    return (::OpenHRP::_impl_CommandReceiver*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
_impl_servoPlugin::_mostDerivedRepoId()
{
  return ::servoPlugin::_PD_repoId;
}

POA_servoPlugin::~POA_servoPlugin() {}

