// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __systemCommand_hh__
#define __systemCommand_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_systemCommand
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_systemCommand
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_systemCommand
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





#ifndef __systemCommand__
#define __systemCommand__

class systemCommand;
class _objref_systemCommand;
class _impl_systemCommand;

typedef _objref_systemCommand* systemCommand_ptr;
typedef systemCommand_ptr systemCommandRef;

class systemCommand_Helper {
public:
  typedef systemCommand_ptr _ptr_type;

  static _ptr_type _nil();
  static _CORBA_Boolean is_nil(_ptr_type);
  static void release(_ptr_type);
  static void duplicate(_ptr_type);
  static void marshalObjRef(_ptr_type, cdrStream&);
  static _ptr_type unmarshalObjRef(cdrStream&);
};

typedef _CORBA_ObjRef_Var<_objref_systemCommand, systemCommand_Helper> systemCommand_var;
typedef _CORBA_ObjRef_OUT_arg<_objref_systemCommand,systemCommand_Helper > systemCommand_out;

#endif

// interface systemCommand
class systemCommand {
public:
  // Declarations for this interface type.
  typedef systemCommand_ptr _ptr_type;
  typedef systemCommand_var _var_type;

  static _ptr_type _duplicate(_ptr_type);
  static _ptr_type _narrow(::CORBA::Object_ptr);
  static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
  
  static _ptr_type _nil();

  static inline void _marshalObjRef(_ptr_type, cdrStream&);

  static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
    omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
    if (o)
      return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
    else
      return _nil();
  }

  static _core_attr const char* _PD_repoId;

  // Other IDL defined within this scope.
  static _core_attr const char * versionStringIDL;

  static _core_attr const char * versionDateIDL;


};

class _objref_systemCommand :
  public virtual ::CORBA::Object,
  public virtual omniObjRef
{
public:
  void function(const char* command, const char* argv, ::CORBA::String_out cout);

  inline _objref_systemCommand()  { _PR_setobj(0); }  // nil
  _objref_systemCommand(omniIOR*, omniIdentity*);

protected:
  virtual ~_objref_systemCommand();

  
private:
  virtual void* _ptrToObjRef(const char*);

  _objref_systemCommand(const _objref_systemCommand&);
  _objref_systemCommand& operator = (const _objref_systemCommand&);
  // not implemented

  friend class systemCommand;
};

class _pof_systemCommand : public _OMNI_NS(proxyObjectFactory) {
public:
  inline _pof_systemCommand() : _OMNI_NS(proxyObjectFactory)(systemCommand::_PD_repoId) {}
  virtual ~_pof_systemCommand();

  virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
  virtual _CORBA_Boolean is_a(const char*) const;
};

class _impl_systemCommand :
  public virtual omniServant
{
public:
  virtual ~_impl_systemCommand();

  virtual void function(const char* command, const char* argv, ::CORBA::String_out cout) = 0;
  
public:  // Really protected, workaround for xlC
  virtual _CORBA_Boolean _dispatch(omniCallHandle&);

private:
  virtual void* _ptrToInterface(const char*);
  virtual const char* _mostDerivedRepoId();
  
};




class POA_systemCommand :
  public virtual _impl_systemCommand,
  public virtual ::PortableServer::ServantBase
{
public:
  virtual ~POA_systemCommand();

  inline ::systemCommand_ptr _this() {
    return (::systemCommand_ptr) _do_this(::systemCommand::_PD_repoId);
  }
};





template <class _omniT>
class POA_systemCommand_tie : public virtual POA_systemCommand
{
public:
  POA_systemCommand_tie(_omniT& t)
    : pd_obj(&t), pd_poa(0), pd_rel(0) {}
  POA_systemCommand_tie(_omniT& t, ::PortableServer::POA_ptr p)
    : pd_obj(&t), pd_poa(p), pd_rel(0) {}
  POA_systemCommand_tie(_omniT* t, _CORBA_Boolean r=1)
    : pd_obj(t), pd_poa(0), pd_rel(r) {}
  POA_systemCommand_tie(_omniT* t, ::PortableServer::POA_ptr p,_CORBA_Boolean r=1)
    : pd_obj(t), pd_poa(p), pd_rel(r) {}
  ~POA_systemCommand_tie() {
    if( pd_poa )  ::CORBA::release(pd_poa);
    if( pd_rel )  delete pd_obj;
  }

  _omniT* _tied_object() { return pd_obj; }

  void _tied_object(_omniT& t) {
    if( pd_rel )  delete pd_obj;
    pd_obj = &t;
    pd_rel = 0;
  }

  void _tied_object(_omniT* t, _CORBA_Boolean r=1) {
    if( pd_rel )  delete pd_obj;
    pd_obj = t;
    pd_rel = r;
  }

  _CORBA_Boolean _is_owner()        { return pd_rel; }
  void _is_owner(_CORBA_Boolean io) { pd_rel = io;   }

  ::PortableServer::POA_ptr _default_POA() {
    if( !pd_poa )  return ::PortableServer::POA::_the_root_poa();
    else           return ::PortableServer::POA::_duplicate(pd_poa);
  }

  void function(const char* command, const char* argv, ::CORBA::String_out cout) { pd_obj->function(command, argv, cout); }


private:
  _omniT*                   pd_obj;
  ::PortableServer::POA_ptr pd_poa;
  _CORBA_Boolean            pd_rel;
};



#undef _core_attr
#undef _dyn_attr



inline void
systemCommand::_marshalObjRef(::systemCommand_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_systemCommand
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_systemCommand
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_systemCommand
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_systemCommand
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_systemCommand
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_systemCommand
#endif

#endif  // __systemCommand_hh__

