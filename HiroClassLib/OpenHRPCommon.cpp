// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "OpenHRPCommon.hpp"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



void
OpenHRP::Transform::operator>>= (cdrStream &_n) const
{
  px >>= _n;
  py >>= _n;
  pz >>= _n;
  qw >>= _n;
  qx >>= _n;
  qy >>= _n;
  qz >>= _n;

}

void
OpenHRP::Transform::operator<<= (cdrStream &_n)
{
  (::CORBA::Double&)px <<= _n;
  (::CORBA::Double&)py <<= _n;
  (::CORBA::Double&)pz <<= _n;
  (::CORBA::Double&)qw <<= _n;
  (::CORBA::Double&)qx <<= _n;
  (::CORBA::Double&)qy <<= _n;
  (::CORBA::Double&)qz <<= _n;

}

void
OpenHRP::LinkPosition::operator>>= (cdrStream &_n) const
{
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(p),24,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 24);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 3; _0i0++){
      p[_0i0] >>= _n;
    }
  }
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(R),72,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 72);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 9; _0i0++){
      R[_0i0] >>= _n;
    }
  }

}

void
OpenHRP::LinkPosition::operator<<= (cdrStream &_n)
{
  _n.unmarshalArrayDouble((_CORBA_Double*)(p), 3);
  _n.unmarshalArrayDouble((_CORBA_Double*)(R), 9);

}

void
OpenHRP::CharacterPosition::operator>>= (cdrStream &_n) const
{
  _n.marshalString(characterName,0);
  (const LinkPositionSequence&) linkPositions >>= _n;

}

void
OpenHRP::CharacterPosition::operator<<= (cdrStream &_n)
{
  characterName = _n.unmarshalString(0);
  (LinkPositionSequence&)linkPositions <<= _n;

}

void
OpenHRP::LinkPair::operator>>= (cdrStream &_n) const
{
  _n.marshalString(charName1,0);
  _n.marshalString(linkName1,0);
  _n.marshalString(charName2,0);
  _n.marshalString(linkName2,0);

}

void
OpenHRP::LinkPair::operator<<= (cdrStream &_n)
{
  charName1 = _n.unmarshalString(0);
  linkName1 = _n.unmarshalString(0);
  charName2 = _n.unmarshalString(0);
  linkName2 = _n.unmarshalString(0);

}

void
OpenHRP::CollisionPoint::operator>>= (cdrStream &_n) const
{
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(position),24,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 24);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 3; _0i0++){
      position[_0i0] >>= _n;
    }
  }
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(normal),24,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 24);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 3; _0i0++){
      normal[_0i0] >>= _n;
    }
  }
  idepth >>= _n;

}

void
OpenHRP::CollisionPoint::operator<<= (cdrStream &_n)
{
  _n.unmarshalArrayDouble((_CORBA_Double*)(position), 3);
  _n.unmarshalArrayDouble((_CORBA_Double*)(normal), 3);
  (::CORBA::Double&)idepth <<= _n;

}

void
OpenHRP::Collision::operator>>= (cdrStream &_n) const
{
  (const LinkPair&) pair >>= _n;
  (const CollisionPointSequence&) points >>= _n;

}

void
OpenHRP::Collision::operator<<= (cdrStream &_n)
{
  (LinkPair&)pair <<= _n;
  (CollisionPointSequence&)points <<= _n;

}

void
OpenHRP::WorldState::operator>>= (cdrStream &_n) const
{
  time >>= _n;
  (const CharacterPositionSequence&) characterPositions >>= _n;
  (const CollisionSequence&) collisions >>= _n;

}

void
OpenHRP::WorldState::operator<<= (cdrStream &_n)
{
  (::CORBA::Double&)time <<= _n;
  (CharacterPositionSequence&)characterPositions <<= _n;
  (CollisionSequence&)collisions <<= _n;

}

OpenHRP::ServerObject_ptr OpenHRP::ServerObject_Helper::_nil() {
  return ::OpenHRP::ServerObject::_nil();
}

::CORBA::Boolean OpenHRP::ServerObject_Helper::is_nil(::OpenHRP::ServerObject_ptr p) {
  return ::CORBA::is_nil(p);

}

void OpenHRP::ServerObject_Helper::release(::OpenHRP::ServerObject_ptr p) {
  ::CORBA::release(p);
}

void OpenHRP::ServerObject_Helper::marshalObjRef(::OpenHRP::ServerObject_ptr obj, cdrStream& s) {
  ::OpenHRP::ServerObject::_marshalObjRef(obj, s);
}

OpenHRP::ServerObject_ptr OpenHRP::ServerObject_Helper::unmarshalObjRef(cdrStream& s) {
  return ::OpenHRP::ServerObject::_unmarshalObjRef(s);
}

void OpenHRP::ServerObject_Helper::duplicate(::OpenHRP::ServerObject_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

OpenHRP::ServerObject_ptr
OpenHRP::ServerObject::_duplicate(::OpenHRP::ServerObject_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

OpenHRP::ServerObject_ptr
OpenHRP::ServerObject::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


OpenHRP::ServerObject_ptr
OpenHRP::ServerObject::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

OpenHRP::ServerObject_ptr
OpenHRP::ServerObject::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ServerObject _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ServerObject* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_ServerObject;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* OpenHRP::ServerObject::_PD_repoId = "IDL:OpenHRP/ServerObject:1.0";


OpenHRP::_objref_ServerObject::~_objref_ServerObject() {
  
}


OpenHRP::_objref_ServerObject::_objref_ServerObject(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::OpenHRP::ServerObject::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
OpenHRP::_objref_ServerObject::_ptrToObjRef(const char* id)
{
  if( id == ::OpenHRP::ServerObject::_PD_repoId )
    return (::OpenHRP::ServerObject_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::OpenHRP::ServerObject::_PD_repoId) )
    return (::OpenHRP::ServerObject_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _wvoid
class _0RL_cd_B9C6C3D81CE566DA_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_B9C6C3D81CE566DA_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 1, 0, 0, upcall)
  {
    
  }
  
  
    
  
  
};

// Local call call-back function.
static void
_0RL_lcfn_B9C6C3D81CE566DA_10000000(omniCallDescriptor*, omniServant* svnt)
{
  
  OpenHRP::_impl_ServerObject* impl = (OpenHRP::_impl_ServerObject*) svnt->_ptrToInterface(OpenHRP::ServerObject::_PD_repoId);
  impl->shutdown();


}

void OpenHRP::_objref_ServerObject::shutdown()
{
  _0RL_cd_B9C6C3D81CE566DA_00000000 _call_desc(_0RL_lcfn_B9C6C3D81CE566DA_10000000, "shutdown", 9);


  _invoke(_call_desc);



}
OpenHRP::_pof_ServerObject::~_pof_ServerObject() {}


omniObjRef*
OpenHRP::_pof_ServerObject::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::OpenHRP::_objref_ServerObject(ior, id);
}


::CORBA::Boolean
OpenHRP::_pof_ServerObject::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::OpenHRP::ServerObject::_PD_repoId) )
    return 1;
  
  return 0;
}

const OpenHRP::_pof_ServerObject _the_pof_OpenHRP_mServerObject;

OpenHRP::_impl_ServerObject::~_impl_ServerObject() {}


::CORBA::Boolean
OpenHRP::_impl_ServerObject::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "shutdown") ) {

    _0RL_cd_B9C6C3D81CE566DA_00000000 _call_desc(_0RL_lcfn_B9C6C3D81CE566DA_10000000, "shutdown", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
OpenHRP::_impl_ServerObject::_ptrToInterface(const char* id)
{
  if( id == ::OpenHRP::ServerObject::_PD_repoId )
    return (::OpenHRP::_impl_ServerObject*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::OpenHRP::ServerObject::_PD_repoId) )
    return (::OpenHRP::_impl_ServerObject*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
OpenHRP::_impl_ServerObject::_mostDerivedRepoId()
{
  return ::OpenHRP::ServerObject::_PD_repoId;
}

POA_OpenHRP::ServerObject::~ServerObject() {}

