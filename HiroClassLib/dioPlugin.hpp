// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __dioPlugin_hh__
#define __dioPlugin_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_dioPlugin
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_dioPlugin
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_dioPlugin
#endif



#ifndef __OpenHRPCommon_hh_EXTERNAL_GUARD__
#define __OpenHRPCommon_hh_EXTERNAL_GUARD__
#include <OpenHRPCommon.hpp>
#endif
#ifndef __HRPcontroller_hh_EXTERNAL_GUARD__
#define __HRPcontroller_hh_EXTERNAL_GUARD__
#include <HRPcontroller.hpp>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





#ifndef __dioPlugin__
#define __dioPlugin__

class dioPlugin;
class _objref_dioPlugin;
class _impl_dioPlugin;

typedef _objref_dioPlugin* dioPlugin_ptr;
typedef dioPlugin_ptr dioPluginRef;

class dioPlugin_Helper {
public:
  typedef dioPlugin_ptr _ptr_type;

  static _ptr_type _nil();
  static _CORBA_Boolean is_nil(_ptr_type);
  static void release(_ptr_type);
  static void duplicate(_ptr_type);
  static void marshalObjRef(_ptr_type, cdrStream&);
  static _ptr_type unmarshalObjRef(cdrStream&);
};

typedef _CORBA_ObjRef_Var<_objref_dioPlugin, dioPlugin_Helper> dioPlugin_var;
typedef _CORBA_ObjRef_OUT_arg<_objref_dioPlugin,dioPlugin_Helper > dioPlugin_out;

#endif

// interface dioPlugin
class dioPlugin {
public:
  // Declarations for this interface type.
  typedef dioPlugin_ptr _ptr_type;
  typedef dioPlugin_var _var_type;

  static _ptr_type _duplicate(_ptr_type);
  static _ptr_type _narrow(::CORBA::Object_ptr);
  static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
  
  static _ptr_type _nil();

  static inline void _marshalObjRef(_ptr_type, cdrStream&);

  static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
    omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
    if (o)
      return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
    else
      return _nil();
  }

  static _core_attr const char* _PD_repoId;

  // Other IDL defined within this scope.
  static _core_attr const ::CORBA::ULong DO_OFF _init_in_cldecl_( = 0U );

  static _core_attr const ::CORBA::ULong DO_ON _init_in_cldecl_( = 4294967295U );

  static _core_attr const ::CORBA::Octet DoutPort33 _init_in_cldecl_( = 32 );

  static _core_attr const ::CORBA::Octet DoutPort34 _init_in_cldecl_( = 33 );

  static _core_attr const ::CORBA::Octet DoutPort35 _init_in_cldecl_( = 34 );

  static _core_attr const ::CORBA::Octet DoutPort36 _init_in_cldecl_( = 35 );

  static _core_attr const ::CORBA::Octet DoutPort37 _init_in_cldecl_( = 36 );

  static _core_attr const ::CORBA::Octet DoutPort38 _init_in_cldecl_( = 37 );

  static _core_attr const ::CORBA::Octet DoutPort39 _init_in_cldecl_( = 38 );

  static _core_attr const ::CORBA::Octet DoutPort40 _init_in_cldecl_( = 39 );

  static _core_attr const ::CORBA::Octet DoutPort41 _init_in_cldecl_( = 40 );

  static _core_attr const ::CORBA::Octet DoutPort42 _init_in_cldecl_( = 41 );

  static _core_attr const ::CORBA::Octet DoutPort43 _init_in_cldecl_( = 42 );

  static _core_attr const ::CORBA::Octet DoutPort44 _init_in_cldecl_( = 43 );

  static _core_attr const ::CORBA::Octet DoutPort45 _init_in_cldecl_( = 44 );

  static _core_attr const ::CORBA::Octet DoutPort46 _init_in_cldecl_( = 45 );

  static _core_attr const ::CORBA::Octet DoutPort47 _init_in_cldecl_( = 46 );

  static _core_attr const ::CORBA::Octet DoutPort48 _init_in_cldecl_( = 47 );

  static _core_attr const ::CORBA::Octet DoutPort49 _init_in_cldecl_( = 48 );

  static _core_attr const ::CORBA::Octet DoutPort50 _init_in_cldecl_( = 49 );

  static _core_attr const ::CORBA::Octet DoutPort51 _init_in_cldecl_( = 50 );

  static _core_attr const ::CORBA::Octet DoutPort52 _init_in_cldecl_( = 51 );

  static _core_attr const ::CORBA::Octet DoutPort53 _init_in_cldecl_( = 52 );

  static _core_attr const ::CORBA::Octet DoutPort54 _init_in_cldecl_( = 53 );

  static _core_attr const ::CORBA::Octet DoutPort55 _init_in_cldecl_( = 54 );

  static _core_attr const ::CORBA::Octet DoutPort56 _init_in_cldecl_( = 55 );

  static _core_attr const ::CORBA::Octet DoutPort57 _init_in_cldecl_( = 56 );

  static _core_attr const ::CORBA::Octet DoutPort58 _init_in_cldecl_( = 57 );

  static _core_attr const ::CORBA::Octet DoutPort59 _init_in_cldecl_( = 58 );

  static _core_attr const ::CORBA::Octet DoutPort60 _init_in_cldecl_( = 59 );

  static _core_attr const ::CORBA::Octet DoutPort61 _init_in_cldecl_( = 60 );

  static _core_attr const ::CORBA::Octet DoutPort62 _init_in_cldecl_( = 61 );

  static _core_attr const ::CORBA::Octet DoutPort63 _init_in_cldecl_( = 62 );

  static _core_attr const ::CORBA::Octet DoutPort64 _init_in_cldecl_( = 63 );

  static _core_attr const ::CORBA::ULongLong DinPort33 _init_in_cldecl_( = _CORBA_LONGLONG_CONST(4294967296U) );

  static _core_attr const ::CORBA::ULongLong DinPort34 _init_in_cldecl_( = _CORBA_LONGLONG_CONST(8589934592U) );

  static _core_attr const ::CORBA::ULongLong DinPort35 _init_in_cldecl_( = _CORBA_LONGLONG_CONST(17179869184U) );

  static _core_attr const ::CORBA::ULongLong DinPort36 _init_in_cldecl_( = _CORBA_LONGLONG_CONST(34359738368U) );

  static _core_attr const ::CORBA::ULongLong DinPort37 _init_in_cldecl_( = _CORBA_LONGLONG_CONST(68719476736U) );

  static _core_attr const ::CORBA::ULongLong DinPort38 _init_in_cldecl_( = _CORBA_LONGLONG_CONST(137438953472U) );

  static _core_attr const ::CORBA::ULongLong DinPort39 _init_in_cldecl_( = _CORBA_LONGLONG_CONST(274877906944U) );

  static _core_attr const ::CORBA::ULongLong DinPort40 _init_in_cldecl_( = _CORBA_LONGLONG_CONST(549755813888U) );

  static _core_attr const ::CORBA::ULongLong DinPort41 _init_in_cldecl_( = _CORBA_LONGLONG_CONST(1099511627776U) );

  static _core_attr const ::CORBA::ULongLong DinPort42 _init_in_cldecl_( = _CORBA_LONGLONG_CONST(2199023255552U) );

  static _core_attr const ::CORBA::ULongLong DinPort43 _init_in_cldecl_( = _CORBA_LONGLONG_CONST(4398046511104U) );

  static _core_attr const ::CORBA::ULongLong DinPort44 _init_in_cldecl_( = _CORBA_LONGLONG_CONST(8796093022208U) );

  static _core_attr const ::CORBA::ULongLong DinPort45 _init_in_cldecl_( = _CORBA_LONGLONG_CONST(17592186044416U) );

  static _core_attr const ::CORBA::ULongLong DinPort46 _init_in_cldecl_( = _CORBA_LONGLONG_CONST(35184372088832U) );

  static _core_attr const ::CORBA::ULongLong DinPort47 _init_in_cldecl_( = _CORBA_LONGLONG_CONST(70368744177664U) );

  static _core_attr const ::CORBA::ULongLong DinPort48 _init_in_cldecl_( = _CORBA_LONGLONG_CONST(140737488355328U) );

  static _core_attr const ::CORBA::ULongLong DinPort49 _init_in_cldecl_( = _CORBA_LONGLONG_CONST(281474976710656U) );

  static _core_attr const ::CORBA::ULongLong DinPort50 _init_in_cldecl_( = _CORBA_LONGLONG_CONST(562949953421312U) );

  static _core_attr const ::CORBA::ULongLong DinPort51 _init_in_cldecl_( = _CORBA_LONGLONG_CONST(1125899906842624U) );

  static _core_attr const ::CORBA::ULongLong DinPort52 _init_in_cldecl_( = _CORBA_LONGLONG_CONST(2251799813685248U) );

  static _core_attr const ::CORBA::ULongLong DinPort53 _init_in_cldecl_( = _CORBA_LONGLONG_CONST(4503599627370496U) );

  static _core_attr const ::CORBA::ULongLong DinPort54 _init_in_cldecl_( = _CORBA_LONGLONG_CONST(9007199254740992U) );

  static _core_attr const ::CORBA::ULongLong DinPort55 _init_in_cldecl_( = _CORBA_LONGLONG_CONST(18014398509481984U) );

  static _core_attr const ::CORBA::ULongLong DinPort56 _init_in_cldecl_( = _CORBA_LONGLONG_CONST(36028797018963968U) );

  static _core_attr const ::CORBA::ULongLong DinPort57 _init_in_cldecl_( = _CORBA_LONGLONG_CONST(72057594037927936U) );

  static _core_attr const ::CORBA::ULongLong DinPort58 _init_in_cldecl_( = _CORBA_LONGLONG_CONST(144115188075855872U) );

  static _core_attr const ::CORBA::ULongLong DinPort59 _init_in_cldecl_( = _CORBA_LONGLONG_CONST(288230376151711744U) );

  static _core_attr const ::CORBA::ULongLong DinPort60 _init_in_cldecl_( = _CORBA_LONGLONG_CONST(576460752303423488U) );

  static _core_attr const ::CORBA::ULongLong DinPort61 _init_in_cldecl_( = _CORBA_LONGLONG_CONST(1152921504606846976U) );

  static _core_attr const ::CORBA::ULongLong DinPort62 _init_in_cldecl_( = _CORBA_LONGLONG_CONST(2305843009213693952U) );

  static _core_attr const ::CORBA::ULongLong DinPort63 _init_in_cldecl_( = _CORBA_LONGLONG_CONST(4611686018427387904U) );

  static _core_attr const ::CORBA::ULongLong DinPort64 _init_in_cldecl_( = _CORBA_LONGLONG_CONST(9223372036854775808U) );

  static _core_attr const char * versionStringIDL;

  static _core_attr const char * versionDateIDL;


};

class _objref_dioPlugin :
  public virtual OpenHRP::_objref_Plugin
{
public:
  ::CORBA::ULongLong getDin();
  ::CORBA::ULong getDout(::CORBA::Octet port);
  ::CORBA::ULongLong getDoutAll();
  ::CORBA::Boolean setDout(::CORBA::Octet port, ::CORBA::ULong blinkingCycle);
  ::CORBA::Boolean setDoutAll(::CORBA::ULongLong on_ports, ::CORBA::ULongLong off_ports);
  void getIDLVersionString(::CORBA::String_out revision, ::CORBA::String_out date);
  void getSrcVersionString(::CORBA::String_out revision, ::CORBA::String_out date);

  inline _objref_dioPlugin()  { _PR_setobj(0); }  // nil
  _objref_dioPlugin(omniIOR*, omniIdentity*);

protected:
  virtual ~_objref_dioPlugin();

  
private:
  virtual void* _ptrToObjRef(const char*);

  _objref_dioPlugin(const _objref_dioPlugin&);
  _objref_dioPlugin& operator = (const _objref_dioPlugin&);
  // not implemented

  friend class dioPlugin;
};

class _pof_dioPlugin : public _OMNI_NS(proxyObjectFactory) {
public:
  inline _pof_dioPlugin() : _OMNI_NS(proxyObjectFactory)(dioPlugin::_PD_repoId) {}
  virtual ~_pof_dioPlugin();

  virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
  virtual _CORBA_Boolean is_a(const char*) const;
};

class _impl_dioPlugin :
  public virtual OpenHRP::_impl_Plugin
{
public:
  virtual ~_impl_dioPlugin();

  virtual ::CORBA::ULongLong getDin() = 0;
  virtual ::CORBA::ULong getDout(::CORBA::Octet port) = 0;
  virtual ::CORBA::ULongLong getDoutAll() = 0;
  virtual ::CORBA::Boolean setDout(::CORBA::Octet port, ::CORBA::ULong blinkingCycle) = 0;
  virtual ::CORBA::Boolean setDoutAll(::CORBA::ULongLong on_ports, ::CORBA::ULongLong off_ports) = 0;
  virtual void getIDLVersionString(::CORBA::String_out revision, ::CORBA::String_out date) = 0;
  virtual void getSrcVersionString(::CORBA::String_out revision, ::CORBA::String_out date) = 0;
  
public:  // Really protected, workaround for xlC
  virtual _CORBA_Boolean _dispatch(omniCallHandle&);

private:
  virtual void* _ptrToInterface(const char*);
  virtual const char* _mostDerivedRepoId();
  
};




class POA_dioPlugin :
  public virtual _impl_dioPlugin,
  public virtual POA_OpenHRP::Plugin
{
public:
  virtual ~POA_dioPlugin();

  inline ::dioPlugin_ptr _this() {
    return (::dioPlugin_ptr) _do_this(::dioPlugin::_PD_repoId);
  }
};





template <class _omniT>
class POA_dioPlugin_tie : public virtual POA_dioPlugin
{
public:
  POA_dioPlugin_tie(_omniT& t)
    : pd_obj(&t), pd_poa(0), pd_rel(0) {}
  POA_dioPlugin_tie(_omniT& t, ::PortableServer::POA_ptr p)
    : pd_obj(&t), pd_poa(p), pd_rel(0) {}
  POA_dioPlugin_tie(_omniT* t, _CORBA_Boolean r=1)
    : pd_obj(t), pd_poa(0), pd_rel(r) {}
  POA_dioPlugin_tie(_omniT* t, ::PortableServer::POA_ptr p,_CORBA_Boolean r=1)
    : pd_obj(t), pd_poa(p), pd_rel(r) {}
  ~POA_dioPlugin_tie() {
    if( pd_poa )  ::CORBA::release(pd_poa);
    if( pd_rel )  delete pd_obj;
  }

  _omniT* _tied_object() { return pd_obj; }

  void _tied_object(_omniT& t) {
    if( pd_rel )  delete pd_obj;
    pd_obj = &t;
    pd_rel = 0;
  }

  void _tied_object(_omniT* t, _CORBA_Boolean r=1) {
    if( pd_rel )  delete pd_obj;
    pd_obj = t;
    pd_rel = r;
  }

  _CORBA_Boolean _is_owner()        { return pd_rel; }
  void _is_owner(_CORBA_Boolean io) { pd_rel = io;   }

  ::PortableServer::POA_ptr _default_POA() {
    if( !pd_poa )  return ::PortableServer::POA::_the_root_poa();
    else           return ::PortableServer::POA::_duplicate(pd_poa);
  }

  ::CORBA::ULongLong getDin() { return pd_obj->getDin(); }
  ::CORBA::ULong getDout(::CORBA::Octet port) { return pd_obj->getDout(port); }
  ::CORBA::ULongLong getDoutAll() { return pd_obj->getDoutAll(); }
  ::CORBA::Boolean setDout(::CORBA::Octet port, ::CORBA::ULong blinkingCycle) { return pd_obj->setDout(port, blinkingCycle); }
  ::CORBA::Boolean setDoutAll(::CORBA::ULongLong on_ports, ::CORBA::ULongLong off_ports) { return pd_obj->setDoutAll(on_ports, off_ports); }
  void getIDLVersionString(::CORBA::String_out revision, ::CORBA::String_out date) { pd_obj->getIDLVersionString(revision, date); }
  void getSrcVersionString(::CORBA::String_out revision, ::CORBA::String_out date) { pd_obj->getSrcVersionString(revision, date); }
  void start() { pd_obj->start(); }
  void stop() { pd_obj->stop(); }
  void sendMsg(const char* msg) { pd_obj->sendMsg(msg); }


private:
  _omniT*                   pd_obj;
  ::PortableServer::POA_ptr pd_poa;
  _CORBA_Boolean            pd_rel;
};



#undef _core_attr
#undef _dyn_attr



inline void
dioPlugin::_marshalObjRef(::dioPlugin_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_dioPlugin
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_dioPlugin
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_dioPlugin
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_dioPlugin
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_dioPlugin
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_dioPlugin
#endif

#endif  // __dioPlugin_hh__

