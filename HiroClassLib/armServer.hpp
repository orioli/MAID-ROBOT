// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __armServer_hh__
#define __armServer_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_armServer
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_armServer
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_armServer
#endif



#ifndef __OpenHRPCommon_hh_EXTERNAL_GUARD__
#define __OpenHRPCommon_hh_EXTERNAL_GUARD__
#include <OpenHRPCommon.hpp>
#endif
#ifndef __HRPcontroller_hh_EXTERNAL_GUARD__
#define __HRPcontroller_hh_EXTERNAL_GUARD__
#include <HRPcontroller.hpp>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





#ifndef __armServer__
#define __armServer__

class armServer;
class _objref_armServer;
class _impl_armServer;

typedef _objref_armServer* armServer_ptr;
typedef armServer_ptr armServerRef;

class armServer_Helper {
public:
  typedef armServer_ptr _ptr_type;

  static _ptr_type _nil();
  static _CORBA_Boolean is_nil(_ptr_type);
  static void release(_ptr_type);
  static void duplicate(_ptr_type);
  static void marshalObjRef(_ptr_type, cdrStream&);
  static _ptr_type unmarshalObjRef(cdrStream&);
};

typedef _CORBA_ObjRef_Var<_objref_armServer, armServer_Helper> armServer_var;
typedef _CORBA_ObjRef_OUT_arg<_objref_armServer,armServer_Helper > armServer_out;

#endif

// interface armServer
class armServer {
public:
  // Declarations for this interface type.
  typedef armServer_ptr _ptr_type;
  typedef armServer_var _var_type;

  static _ptr_type _duplicate(_ptr_type);
  static _ptr_type _narrow(::CORBA::Object_ptr);
  static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
  
  static _ptr_type _nil();

  static inline void _marshalObjRef(_ptr_type, cdrStream&);

  static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
    omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
    if (o)
      return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
    else
      return _nil();
  }

  static _core_attr const char* _PD_repoId;

  // Other IDL defined within this scope.
  static _core_attr const ::CORBA::ULong InitializationStage _init_in_cldecl_( = 1U );

  static _core_attr const ::CORBA::ULong BusyError _init_in_cldecl_( = 2U );

  static _core_attr const ::CORBA::ULong SpeedSpecifyError _init_in_cldecl_( = 4U );

  static _core_attr const ::CORBA::ULong SpeedChangedWarning _init_in_cldecl_( = 8U );

  static _core_attr const ::CORBA::ULong InterpolatorInitError _init_in_cldecl_( = 16U );

  static _core_attr const ::CORBA::ULong SplinePathLengthTooLong _init_in_cldecl_( = 32U );

  static _core_attr const ::CORBA::ULong SplineCalculationError _init_in_cldecl_( = 64U );

  static _core_attr const ::CORBA::ULong IKErrorRight _init_in_cldecl_( = 256U );

  static _core_attr const ::CORBA::ULong WristCollisionErrorRight _init_in_cldecl_( = 512U );

  static _core_attr const ::CORBA::ULong IKErrorLeft _init_in_cldecl_( = 1024U );

  static _core_attr const ::CORBA::ULong WristCollisionErrorLeft _init_in_cldecl_( = 2048U );

  static _core_attr const ::CORBA::ULong EndPointCollisionError _init_in_cldecl_( = 4096U );

  static _core_attr const ::CORBA::ULong JointAngleLimitErrorRight _init_in_cldecl_( = 8192U );

  static _core_attr const ::CORBA::ULong JointAngleLimitErrorLeft _init_in_cldecl_( = 16384U );

  static _core_attr const ::CORBA::ULong JointAngleLimitErrorChest _init_in_cldecl_( = 32768U );

  static _core_attr const ::CORBA::ULong JointAngleLimitErrorNeck _init_in_cldecl_( = 65536U );

  static _core_attr const ::CORBA::ULong WristSynchronizationError _init_in_cldecl_( = 131072U );

  static _core_attr const ::CORBA::ULong MaxInterpolationTimeExceeded _init_in_cldecl_( = 262144U );

  static _core_attr const ::CORBA::ULong RotationMatrixError _init_in_cldecl_( = 524288U );

  static _core_attr const ::CORBA::ULong ProtectiveStopState _init_in_cldecl_( = 8388608U );

  static _core_attr const ::CORBA::ULong ServoEmergency _init_in_cldecl_( = 16777216U );

  static _core_attr const ::CORBA::ULong InterruptedRightArm _init_in_cldecl_( = 268435456U );

  static _core_attr const ::CORBA::ULong InterruptedLeftArm _init_in_cldecl_( = 536870912U );

  static _core_attr const ::CORBA::ULong InterruptedNeck _init_in_cldecl_( = 1073741824U );

  static _core_attr const ::CORBA::ULong InterruptedChest _init_in_cldecl_( = 2147483648U );

  class LngLngSeq_var;

  class LngLngSeq : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::LongLong, 8, 8 >  {
  public:
    typedef LngLngSeq_var _var_type;
    inline LngLngSeq() {}
    inline LngLngSeq(const LngLngSeq& _s)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::LongLong, 8, 8 > (_s) {}

    inline LngLngSeq(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::LongLong, 8, 8 > (_max) {}
    inline LngLngSeq(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::LongLong* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::LongLong, 8, 8 > (_max, _len, _val, _rel) {}

  

    inline LngLngSeq& operator = (const LngLngSeq& _s) {
      _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::LongLong, 8, 8 > ::operator=(_s);
      return *this;
    }
  };

  class LngLngSeq_out;

  class LngLngSeq_var {
  public:
    inline LngLngSeq_var() : _pd_seq(0) {}
    inline LngLngSeq_var(LngLngSeq* _s) : _pd_seq(_s) {}
    inline LngLngSeq_var(const LngLngSeq_var& _s) {
      if( _s._pd_seq )  _pd_seq = new LngLngSeq(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~LngLngSeq_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline LngLngSeq_var& operator = (LngLngSeq* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline LngLngSeq_var& operator = (const LngLngSeq_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new LngLngSeq;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline ::CORBA::LongLong& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline LngLngSeq* operator -> () { return _pd_seq; }
    inline const LngLngSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator LngLngSeq& () const { return *_pd_seq; }
#else
    inline operator const LngLngSeq& () const { return *_pd_seq; }
    inline operator LngLngSeq& () { return *_pd_seq; }
#endif
      
    inline const LngLngSeq& in() const { return *_pd_seq; }
    inline LngLngSeq&       inout()    { return *_pd_seq; }
    inline LngLngSeq*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline LngLngSeq* _retn() { LngLngSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class LngLngSeq_out;
    
  private:
    LngLngSeq* _pd_seq;
  };

  class LngLngSeq_out {
  public:
    inline LngLngSeq_out(LngLngSeq*& _s) : _data(_s) { _data = 0; }
    inline LngLngSeq_out(LngLngSeq_var& _s)
      : _data(_s._pd_seq) { _s = (LngLngSeq*) 0; }
    inline LngLngSeq_out(const LngLngSeq_out& _s) : _data(_s._data) {}
    inline LngLngSeq_out& operator = (const LngLngSeq_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline LngLngSeq_out& operator = (LngLngSeq* _s) {
      _data = _s;
      return *this;
    }
    inline operator LngLngSeq*&()  { return _data; }
    inline LngLngSeq*& ptr()       { return _data; }
    inline LngLngSeq* operator->() { return _data; }

    inline ::CORBA::LongLong& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    LngLngSeq*& _data;

  private:
    LngLngSeq_out();
    LngLngSeq_out& operator=(const LngLngSeq_var&);
  };

  typedef ::CORBA::Float FltArray15[15];
  typedef ::CORBA::Float FltArray15_slice;

  static inline FltArray15_slice* FltArray15_alloc() {
    return new FltArray15_slice[15];
  }

  static inline FltArray15_slice* FltArray15_dup(const FltArray15_slice* _s) {
    if (!_s) return 0;
    FltArray15_slice* _data = FltArray15_alloc();
    if (_data) {
      for (_CORBA_ULong _0i0 = 0; _0i0 < 15; _0i0++){
        
        _data[_0i0] = _s[_0i0];

      }
  
    }
    return _data;
  }

  static inline void FltArray15_copy(FltArray15_slice* _to, const FltArray15_slice* _from){
    for (_CORBA_ULong _0i0 = 0; _0i0 < 15; _0i0++){
      
      _to[_0i0] = _from[_0i0];

    }
  
  }

  static inline void FltArray15_free(FltArray15_slice* _s) {
      delete [] _s;
  }

  class FltArray15_copyHelper {
  public:
    static inline FltArray15_slice* alloc() { return FltArray15_alloc(); }
    static inline FltArray15_slice* dup(const FltArray15_slice* p) { return FltArray15_dup(p); }
    static inline void free(FltArray15_slice* p) { FltArray15_free(p); }
  };

  typedef _CORBA_Array_Fix_Var<FltArray15_copyHelper,FltArray15_slice> FltArray15_var;
  typedef _CORBA_Array_Fix_Forany<FltArray15_copyHelper,FltArray15_slice> FltArray15_forany;

  typedef FltArray15_slice* FltArray15_out;

  typedef ::CORBA::Boolean BolArray15[15];
  typedef ::CORBA::Boolean BolArray15_slice;

  static inline BolArray15_slice* BolArray15_alloc() {
    return new BolArray15_slice[15];
  }

  static inline BolArray15_slice* BolArray15_dup(const BolArray15_slice* _s) {
    if (!_s) return 0;
    BolArray15_slice* _data = BolArray15_alloc();
    if (_data) {
      for (_CORBA_ULong _0i0 = 0; _0i0 < 15; _0i0++){
        
        _data[_0i0] = _s[_0i0];

      }
  
    }
    return _data;
  }

  static inline void BolArray15_copy(BolArray15_slice* _to, const BolArray15_slice* _from){
    for (_CORBA_ULong _0i0 = 0; _0i0 < 15; _0i0++){
      
      _to[_0i0] = _from[_0i0];

    }
  
  }

  static inline void BolArray15_free(BolArray15_slice* _s) {
      delete [] _s;
  }

  class BolArray15_copyHelper {
  public:
    static inline BolArray15_slice* alloc() { return BolArray15_alloc(); }
    static inline BolArray15_slice* dup(const BolArray15_slice* p) { return BolArray15_dup(p); }
    static inline void free(BolArray15_slice* p) { BolArray15_free(p); }
  };

  typedef _CORBA_Array_Fix_Var<BolArray15_copyHelper,BolArray15_slice> BolArray15_var;
  typedef _CORBA_Array_Fix_Forany<BolArray15_copyHelper,BolArray15_slice> BolArray15_forany;

  typedef BolArray15_slice* BolArray15_out;

  typedef ::CORBA::LongLong LngArray15[15];
  typedef ::CORBA::LongLong LngArray15_slice;

  static inline LngArray15_slice* LngArray15_alloc() {
    return new LngArray15_slice[15];
  }

  static inline LngArray15_slice* LngArray15_dup(const LngArray15_slice* _s) {
    if (!_s) return 0;
    LngArray15_slice* _data = LngArray15_alloc();
    if (_data) {
      for (_CORBA_ULong _0i0 = 0; _0i0 < 15; _0i0++){
        
        _data[_0i0] = _s[_0i0];

      }
  
    }
    return _data;
  }

  static inline void LngArray15_copy(LngArray15_slice* _to, const LngArray15_slice* _from){
    for (_CORBA_ULong _0i0 = 0; _0i0 < 15; _0i0++){
      
      _to[_0i0] = _from[_0i0];

    }
  
  }

  static inline void LngArray15_free(LngArray15_slice* _s) {
      delete [] _s;
  }

  class LngArray15_copyHelper {
  public:
    static inline LngArray15_slice* alloc() { return LngArray15_alloc(); }
    static inline LngArray15_slice* dup(const LngArray15_slice* p) { return LngArray15_dup(p); }
    static inline void free(LngArray15_slice* p) { LngArray15_free(p); }
  };

  typedef _CORBA_Array_Fix_Var<LngArray15_copyHelper,LngArray15_slice> LngArray15_var;
  typedef _CORBA_Array_Fix_Forany<LngArray15_copyHelper,LngArray15_slice> LngArray15_forany;

  typedef LngArray15_slice* LngArray15_out;

  typedef ::CORBA::Long LngArray4[4];
  typedef ::CORBA::Long LngArray4_slice;

  static inline LngArray4_slice* LngArray4_alloc() {
    return new LngArray4_slice[4];
  }

  static inline LngArray4_slice* LngArray4_dup(const LngArray4_slice* _s) {
    if (!_s) return 0;
    LngArray4_slice* _data = LngArray4_alloc();
    if (_data) {
      for (_CORBA_ULong _0i0 = 0; _0i0 < 4; _0i0++){
        
        _data[_0i0] = _s[_0i0];

      }
  
    }
    return _data;
  }

  static inline void LngArray4_copy(LngArray4_slice* _to, const LngArray4_slice* _from){
    for (_CORBA_ULong _0i0 = 0; _0i0 < 4; _0i0++){
      
      _to[_0i0] = _from[_0i0];

    }
  
  }

  static inline void LngArray4_free(LngArray4_slice* _s) {
      delete [] _s;
  }

  class LngArray4_copyHelper {
  public:
    static inline LngArray4_slice* alloc() { return LngArray4_alloc(); }
    static inline LngArray4_slice* dup(const LngArray4_slice* p) { return LngArray4_dup(p); }
    static inline void free(LngArray4_slice* p) { LngArray4_free(p); }
  };

  typedef _CORBA_Array_Fix_Var<LngArray4_copyHelper,LngArray4_slice> LngArray4_var;
  typedef _CORBA_Array_Fix_Forany<LngArray4_copyHelper,LngArray4_slice> LngArray4_forany;

  typedef LngArray4_slice* LngArray4_out;

  static _core_attr const char * versionStringIDL;

  static _core_attr const char * versionDateIDL;


};

class _objref_armServer :
  public virtual ::CORBA::Object,
  public virtual omniObjRef
{
public:
  ::CORBA::ULong getStatus();
  ::CORBA::Boolean jointCalibration(const armServer::LngLngSeq& seq, const armServer::FltArray15 angles, const armServer::BolArray15 rot, ::CORBA::ULong& status);
  ::CORBA::Boolean checkCalibration();
  ::CORBA::Boolean switchServo(::CORBA::Boolean t);
  ::CORBA::Boolean getServoStatus(armServer::LngArray15 status);
  void protectiveStop(const armServer::LngArray4 inputID, armServer::LngArray4 outputID);
  void exitProtectiveStop(const armServer::LngArray4 inputID, armServer::LngArray4 outputID);
  ::CORBA::Boolean motionCancel(::CORBA::Octet& part);
  ::CORBA::ULong setOffsetRightHand(::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z);
  void getOffsetRightHand(::CORBA::Double& x, ::CORBA::Double& y, ::CORBA::Double& z);
  ::CORBA::ULong setOffsetLeftHand(::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z);
  void getOffsetLeftHand(::CORBA::Double& x, ::CORBA::Double& y, ::CORBA::Double& z);
  ::CORBA::ULong setOffsetRightHandEx(::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z, ::CORBA::Double r, ::CORBA::Double p, ::CORBA::Double w);
  void getOffsetRightHandEx(::CORBA::Double& x, ::CORBA::Double& y, ::CORBA::Double& z, ::CORBA::Double& r, ::CORBA::Double& p, ::CORBA::Double& w);
  ::CORBA::ULong setOffsetLeftHandEx(::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z, ::CORBA::Double r, ::CORBA::Double p, ::CORBA::Double w);
  void getOffsetLeftHandEx(::CORBA::Double& x, ::CORBA::Double& y, ::CORBA::Double& z, ::CORBA::Double& r, ::CORBA::Double& p, ::CORBA::Double& w);
  ::CORBA::Boolean inMotion(::CORBA::Octet& part, ::CORBA::Boolean wait);
  ::CORBA::Double setAngleChestP(::CORBA::Double y, ::CORBA::Double percent, ::CORBA::ULong& status);
  ::CORBA::Double setAnglesNeckP(::CORBA::Double y, ::CORBA::Double p, ::CORBA::Double percent, ::CORBA::ULong& status);
  ::CORBA::Double setJointAnglesRightArmP(::CORBA::Double j0, ::CORBA::Double j1, ::CORBA::Double j2, ::CORBA::Double j3, ::CORBA::Double j4, ::CORBA::Double j5, ::CORBA::Double percent, ::CORBA::ULong& status);
  ::CORBA::Double setJointAnglesLeftArmP(::CORBA::Double j0, ::CORBA::Double j1, ::CORBA::Double j2, ::CORBA::Double j3, ::CORBA::Double j4, ::CORBA::Double j5, ::CORBA::Double percent, ::CORBA::ULong& status);
  ::CORBA::Double setTargetRightArmP(::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z, ::CORBA::Double r, ::CORBA::Double p, ::CORBA::Double w, ::CORBA::Double percent, ::CORBA::ULong& status);
  ::CORBA::Double setTargetLeftArmP(::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z, ::CORBA::Double r, ::CORBA::Double p, ::CORBA::Double w, ::CORBA::Double percent, ::CORBA::ULong& status);
  ::CORBA::Double seqTargetRightArmP(::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z, ::CORBA::Double r, ::CORBA::Double p, ::CORBA::Double w, ::CORBA::Double percent, ::CORBA::ULong& status);
  ::CORBA::Double seqTargetLeftArmP(::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z, ::CORBA::Double r, ::CORBA::Double p, ::CORBA::Double w, ::CORBA::Double percent, ::CORBA::ULong& status);
  ::CORBA::Double setTargetRightArmMatrixP(const OpenHRP::DblArray9 rotMatrix, const OpenHRP::DblArray3 offset, ::CORBA::Double percent, ::CORBA::ULong& status);
  ::CORBA::Double setTargetLeftArmMatrixP(const OpenHRP::DblArray9 rotMatrix, const OpenHRP::DblArray3 offset, ::CORBA::Double percent, ::CORBA::ULong& status);
  ::CORBA::Double seqTargetRightArmMatrixP(const OpenHRP::DblArray9 rotMatrix, const OpenHRP::DblArray3 offset, ::CORBA::Double percent, ::CORBA::ULong& status);
  ::CORBA::Double seqTargetLeftArmMatrixP(const OpenHRP::DblArray9 rotMatrix, const OpenHRP::DblArray3 offset, ::CORBA::Double percent, ::CORBA::ULong& status);
  void getJointAngleChest(::CORBA::Double& y);
  void getJointAngleChestReal(::CORBA::Double& y);
  void getJointAngleChestGoal(::CORBA::Double& y);
  void getJointAnglesNeck(::CORBA::Double& y, ::CORBA::Double& p);
  void getJointAnglesNeckReal(::CORBA::Double& y, ::CORBA::Double& p);
  void getJointAnglesRightArm(::CORBA::Double& j00, ::CORBA::Double& j11, ::CORBA::Double& j22, ::CORBA::Double& j33, ::CORBA::Double& j44, ::CORBA::Double& j55);
  void getJointAnglesRightArmReal(::CORBA::Double& j00, ::CORBA::Double& j11, ::CORBA::Double& j22, ::CORBA::Double& j33, ::CORBA::Double& j44, ::CORBA::Double& j55);
  void getJointAnglesLeftArm(::CORBA::Double& j00, ::CORBA::Double& j11, ::CORBA::Double& j22, ::CORBA::Double& j33, ::CORBA::Double& j44, ::CORBA::Double& j55);
  void getJointAnglesLeftArmReal(::CORBA::Double& j00, ::CORBA::Double& j11, ::CORBA::Double& j22, ::CORBA::Double& j33, ::CORBA::Double& j44, ::CORBA::Double& j55);
  void getPositionRightArm(::CORBA::Double& x, ::CORBA::Double& y, ::CORBA::Double& z, ::CORBA::Double& r, ::CORBA::Double& p, ::CORBA::Double& w);
  void getPositionRightArmReal(::CORBA::Double& x, ::CORBA::Double& y, ::CORBA::Double& z, ::CORBA::Double& r, ::CORBA::Double& p, ::CORBA::Double& w);
  void getPositionLeftArm(::CORBA::Double& x, ::CORBA::Double& y, ::CORBA::Double& z, ::CORBA::Double& r, ::CORBA::Double& p, ::CORBA::Double& w);
  void getPositionLeftArmReal(::CORBA::Double& x, ::CORBA::Double& y, ::CORBA::Double& z, ::CORBA::Double& r, ::CORBA::Double& p, ::CORBA::Double& w);
  void getPositionRightArmMatrix(OpenHRP::DblArray9 rotMatrix, OpenHRP::DblArray3 offset);
  void getPositionRightArmMatrixReal(OpenHRP::DblArray9 rotMatrix, OpenHRP::DblArray3 offset);
  void getPositionLeftArmMatrix(OpenHRP::DblArray9 rotMatrix, OpenHRP::DblArray3 offset);
  void getPositionLeftArmMatrixReal(OpenHRP::DblArray9 rotMatrix, OpenHRP::DblArray3 offset);
  ::CORBA::Boolean jointAnglesFromConfigurationRight(::CORBA::Double chest, ::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z, ::CORBA::Double r, ::CORBA::Double p, ::CORBA::Double w, ::CORBA::Double& j00, ::CORBA::Double& j11, ::CORBA::Double& j22, ::CORBA::Double& j33, ::CORBA::Double& j44, ::CORBA::Double& j55, ::CORBA::Long& maxIK);
  ::CORBA::Boolean jointAnglesFromConfigurationLeft(::CORBA::Double chest, ::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z, ::CORBA::Double r, ::CORBA::Double p, ::CORBA::Double w, ::CORBA::Double& j00, ::CORBA::Double& j11, ::CORBA::Double& j22, ::CORBA::Double& j33, ::CORBA::Double& j44, ::CORBA::Double& j55, ::CORBA::Long& maxIK);
  ::CORBA::Boolean configurationFromJointAnglesRight(::CORBA::Double j00, ::CORBA::Double j11, ::CORBA::Double j22, ::CORBA::Double j33, ::CORBA::Double j44, ::CORBA::Double j55, ::CORBA::Double j66, ::CORBA::Double& x, ::CORBA::Double& y, ::CORBA::Double& z, ::CORBA::Double& r, ::CORBA::Double& p, ::CORBA::Double& w);
  ::CORBA::Boolean configurationFromJointAnglesLeft(::CORBA::Double j00, ::CORBA::Double j11, ::CORBA::Double j22, ::CORBA::Double j33, ::CORBA::Double j44, ::CORBA::Double j55, ::CORBA::Double j66, ::CORBA::Double& x, ::CORBA::Double& y, ::CORBA::Double& z, ::CORBA::Double& r, ::CORBA::Double& p, ::CORBA::Double& w);
  void getIDLVersionString(::CORBA::String_out revision, ::CORBA::String_out date);
  void getSrcVersionString(::CORBA::String_out revision, ::CORBA::String_out date);

  inline _objref_armServer()  { _PR_setobj(0); }  // nil
  _objref_armServer(omniIOR*, omniIdentity*);

protected:
  virtual ~_objref_armServer();

  
private:
  virtual void* _ptrToObjRef(const char*);

  _objref_armServer(const _objref_armServer&);
  _objref_armServer& operator = (const _objref_armServer&);
  // not implemented

  friend class armServer;
};

class _pof_armServer : public _OMNI_NS(proxyObjectFactory) {
public:
  inline _pof_armServer() : _OMNI_NS(proxyObjectFactory)(armServer::_PD_repoId) {}
  virtual ~_pof_armServer();

  virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
  virtual _CORBA_Boolean is_a(const char*) const;
};

class _impl_armServer :
  public virtual omniServant
{
public:
  virtual ~_impl_armServer();

  virtual ::CORBA::ULong getStatus() = 0;
  virtual ::CORBA::Boolean jointCalibration(const armServer::LngLngSeq& seq, const armServer::FltArray15 angles, const armServer::BolArray15 rot, ::CORBA::ULong& status) = 0;
  virtual ::CORBA::Boolean checkCalibration() = 0;
  virtual ::CORBA::Boolean switchServo(::CORBA::Boolean t) = 0;
  virtual ::CORBA::Boolean getServoStatus(armServer::LngArray15 status) = 0;
  virtual void protectiveStop(const armServer::LngArray4 inputID, armServer::LngArray4 outputID) = 0;
  virtual void exitProtectiveStop(const armServer::LngArray4 inputID, armServer::LngArray4 outputID) = 0;
  virtual ::CORBA::Boolean motionCancel(::CORBA::Octet& part) = 0;
  virtual ::CORBA::ULong setOffsetRightHand(::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z) = 0;
  virtual void getOffsetRightHand(::CORBA::Double& x, ::CORBA::Double& y, ::CORBA::Double& z) = 0;
  virtual ::CORBA::ULong setOffsetLeftHand(::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z) = 0;
  virtual void getOffsetLeftHand(::CORBA::Double& x, ::CORBA::Double& y, ::CORBA::Double& z) = 0;
  virtual ::CORBA::ULong setOffsetRightHandEx(::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z, ::CORBA::Double r, ::CORBA::Double p, ::CORBA::Double w) = 0;
  virtual void getOffsetRightHandEx(::CORBA::Double& x, ::CORBA::Double& y, ::CORBA::Double& z, ::CORBA::Double& r, ::CORBA::Double& p, ::CORBA::Double& w) = 0;
  virtual ::CORBA::ULong setOffsetLeftHandEx(::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z, ::CORBA::Double r, ::CORBA::Double p, ::CORBA::Double w) = 0;
  virtual void getOffsetLeftHandEx(::CORBA::Double& x, ::CORBA::Double& y, ::CORBA::Double& z, ::CORBA::Double& r, ::CORBA::Double& p, ::CORBA::Double& w) = 0;
  virtual ::CORBA::Boolean inMotion(::CORBA::Octet& part, ::CORBA::Boolean wait) = 0;
  virtual ::CORBA::Double setAngleChestP(::CORBA::Double y, ::CORBA::Double percent, ::CORBA::ULong& status) = 0;
  virtual ::CORBA::Double setAnglesNeckP(::CORBA::Double y, ::CORBA::Double p, ::CORBA::Double percent, ::CORBA::ULong& status) = 0;
  virtual ::CORBA::Double setJointAnglesRightArmP(::CORBA::Double j0, ::CORBA::Double j1, ::CORBA::Double j2, ::CORBA::Double j3, ::CORBA::Double j4, ::CORBA::Double j5, ::CORBA::Double percent, ::CORBA::ULong& status) = 0;
  virtual ::CORBA::Double setJointAnglesLeftArmP(::CORBA::Double j0, ::CORBA::Double j1, ::CORBA::Double j2, ::CORBA::Double j3, ::CORBA::Double j4, ::CORBA::Double j5, ::CORBA::Double percent, ::CORBA::ULong& status) = 0;
  virtual ::CORBA::Double setTargetRightArmP(::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z, ::CORBA::Double r, ::CORBA::Double p, ::CORBA::Double w, ::CORBA::Double percent, ::CORBA::ULong& status) = 0;
  virtual ::CORBA::Double setTargetLeftArmP(::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z, ::CORBA::Double r, ::CORBA::Double p, ::CORBA::Double w, ::CORBA::Double percent, ::CORBA::ULong& status) = 0;
  virtual ::CORBA::Double seqTargetRightArmP(::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z, ::CORBA::Double r, ::CORBA::Double p, ::CORBA::Double w, ::CORBA::Double percent, ::CORBA::ULong& status) = 0;
  virtual ::CORBA::Double seqTargetLeftArmP(::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z, ::CORBA::Double r, ::CORBA::Double p, ::CORBA::Double w, ::CORBA::Double percent, ::CORBA::ULong& status) = 0;
  virtual ::CORBA::Double setTargetRightArmMatrixP(const OpenHRP::DblArray9 rotMatrix, const OpenHRP::DblArray3 offset, ::CORBA::Double percent, ::CORBA::ULong& status) = 0;
  virtual ::CORBA::Double setTargetLeftArmMatrixP(const OpenHRP::DblArray9 rotMatrix, const OpenHRP::DblArray3 offset, ::CORBA::Double percent, ::CORBA::ULong& status) = 0;
  virtual ::CORBA::Double seqTargetRightArmMatrixP(const OpenHRP::DblArray9 rotMatrix, const OpenHRP::DblArray3 offset, ::CORBA::Double percent, ::CORBA::ULong& status) = 0;
  virtual ::CORBA::Double seqTargetLeftArmMatrixP(const OpenHRP::DblArray9 rotMatrix, const OpenHRP::DblArray3 offset, ::CORBA::Double percent, ::CORBA::ULong& status) = 0;
  virtual void getJointAngleChest(::CORBA::Double& y) = 0;
  virtual void getJointAngleChestReal(::CORBA::Double& y) = 0;
  virtual void getJointAngleChestGoal(::CORBA::Double& y) = 0;
  virtual void getJointAnglesNeck(::CORBA::Double& y, ::CORBA::Double& p) = 0;
  virtual void getJointAnglesNeckReal(::CORBA::Double& y, ::CORBA::Double& p) = 0;
  virtual void getJointAnglesRightArm(::CORBA::Double& j00, ::CORBA::Double& j11, ::CORBA::Double& j22, ::CORBA::Double& j33, ::CORBA::Double& j44, ::CORBA::Double& j55) = 0;
  virtual void getJointAnglesRightArmReal(::CORBA::Double& j00, ::CORBA::Double& j11, ::CORBA::Double& j22, ::CORBA::Double& j33, ::CORBA::Double& j44, ::CORBA::Double& j55) = 0;
  virtual void getJointAnglesLeftArm(::CORBA::Double& j00, ::CORBA::Double& j11, ::CORBA::Double& j22, ::CORBA::Double& j33, ::CORBA::Double& j44, ::CORBA::Double& j55) = 0;
  virtual void getJointAnglesLeftArmReal(::CORBA::Double& j00, ::CORBA::Double& j11, ::CORBA::Double& j22, ::CORBA::Double& j33, ::CORBA::Double& j44, ::CORBA::Double& j55) = 0;
  virtual void getPositionRightArm(::CORBA::Double& x, ::CORBA::Double& y, ::CORBA::Double& z, ::CORBA::Double& r, ::CORBA::Double& p, ::CORBA::Double& w) = 0;
  virtual void getPositionRightArmReal(::CORBA::Double& x, ::CORBA::Double& y, ::CORBA::Double& z, ::CORBA::Double& r, ::CORBA::Double& p, ::CORBA::Double& w) = 0;
  virtual void getPositionLeftArm(::CORBA::Double& x, ::CORBA::Double& y, ::CORBA::Double& z, ::CORBA::Double& r, ::CORBA::Double& p, ::CORBA::Double& w) = 0;
  virtual void getPositionLeftArmReal(::CORBA::Double& x, ::CORBA::Double& y, ::CORBA::Double& z, ::CORBA::Double& r, ::CORBA::Double& p, ::CORBA::Double& w) = 0;
  virtual void getPositionRightArmMatrix(OpenHRP::DblArray9 rotMatrix, OpenHRP::DblArray3 offset) = 0;
  virtual void getPositionRightArmMatrixReal(OpenHRP::DblArray9 rotMatrix, OpenHRP::DblArray3 offset) = 0;
  virtual void getPositionLeftArmMatrix(OpenHRP::DblArray9 rotMatrix, OpenHRP::DblArray3 offset) = 0;
  virtual void getPositionLeftArmMatrixReal(OpenHRP::DblArray9 rotMatrix, OpenHRP::DblArray3 offset) = 0;
  virtual ::CORBA::Boolean jointAnglesFromConfigurationRight(::CORBA::Double chest, ::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z, ::CORBA::Double r, ::CORBA::Double p, ::CORBA::Double w, ::CORBA::Double& j00, ::CORBA::Double& j11, ::CORBA::Double& j22, ::CORBA::Double& j33, ::CORBA::Double& j44, ::CORBA::Double& j55, ::CORBA::Long& maxIK) = 0;
  virtual ::CORBA::Boolean jointAnglesFromConfigurationLeft(::CORBA::Double chest, ::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z, ::CORBA::Double r, ::CORBA::Double p, ::CORBA::Double w, ::CORBA::Double& j00, ::CORBA::Double& j11, ::CORBA::Double& j22, ::CORBA::Double& j33, ::CORBA::Double& j44, ::CORBA::Double& j55, ::CORBA::Long& maxIK) = 0;
  virtual ::CORBA::Boolean configurationFromJointAnglesRight(::CORBA::Double j00, ::CORBA::Double j11, ::CORBA::Double j22, ::CORBA::Double j33, ::CORBA::Double j44, ::CORBA::Double j55, ::CORBA::Double j66, ::CORBA::Double& x, ::CORBA::Double& y, ::CORBA::Double& z, ::CORBA::Double& r, ::CORBA::Double& p, ::CORBA::Double& w) = 0;
  virtual ::CORBA::Boolean configurationFromJointAnglesLeft(::CORBA::Double j00, ::CORBA::Double j11, ::CORBA::Double j22, ::CORBA::Double j33, ::CORBA::Double j44, ::CORBA::Double j55, ::CORBA::Double j66, ::CORBA::Double& x, ::CORBA::Double& y, ::CORBA::Double& z, ::CORBA::Double& r, ::CORBA::Double& p, ::CORBA::Double& w) = 0;
  virtual void getIDLVersionString(::CORBA::String_out revision, ::CORBA::String_out date) = 0;
  virtual void getSrcVersionString(::CORBA::String_out revision, ::CORBA::String_out date) = 0;
  
public:  // Really protected, workaround for xlC
  virtual _CORBA_Boolean _dispatch(omniCallHandle&);

private:
  virtual void* _ptrToInterface(const char*);
  virtual const char* _mostDerivedRepoId();
  
};




class POA_armServer :
  public virtual _impl_armServer,
  public virtual ::PortableServer::ServantBase
{
public:
  virtual ~POA_armServer();

  inline ::armServer_ptr _this() {
    return (::armServer_ptr) _do_this(::armServer::_PD_repoId);
  }
};





template <class _omniT>
class POA_armServer_tie : public virtual POA_armServer
{
public:
  POA_armServer_tie(_omniT& t)
    : pd_obj(&t), pd_poa(0), pd_rel(0) {}
  POA_armServer_tie(_omniT& t, ::PortableServer::POA_ptr p)
    : pd_obj(&t), pd_poa(p), pd_rel(0) {}
  POA_armServer_tie(_omniT* t, _CORBA_Boolean r=1)
    : pd_obj(t), pd_poa(0), pd_rel(r) {}
  POA_armServer_tie(_omniT* t, ::PortableServer::POA_ptr p,_CORBA_Boolean r=1)
    : pd_obj(t), pd_poa(p), pd_rel(r) {}
  ~POA_armServer_tie() {
    if( pd_poa )  ::CORBA::release(pd_poa);
    if( pd_rel )  delete pd_obj;
  }

  _omniT* _tied_object() { return pd_obj; }

  void _tied_object(_omniT& t) {
    if( pd_rel )  delete pd_obj;
    pd_obj = &t;
    pd_rel = 0;
  }

  void _tied_object(_omniT* t, _CORBA_Boolean r=1) {
    if( pd_rel )  delete pd_obj;
    pd_obj = t;
    pd_rel = r;
  }

  _CORBA_Boolean _is_owner()        { return pd_rel; }
  void _is_owner(_CORBA_Boolean io) { pd_rel = io;   }

  ::PortableServer::POA_ptr _default_POA() {
    if( !pd_poa )  return ::PortableServer::POA::_the_root_poa();
    else           return ::PortableServer::POA::_duplicate(pd_poa);
  }

  ::CORBA::ULong getStatus() { return pd_obj->getStatus(); }
  ::CORBA::Boolean jointCalibration(const armServer::LngLngSeq& seq, const armServer::FltArray15 angles, const armServer::BolArray15 rot, ::CORBA::ULong& status) { return pd_obj->jointCalibration(seq, angles, rot, status); }
  ::CORBA::Boolean checkCalibration() { return pd_obj->checkCalibration(); }
  ::CORBA::Boolean switchServo(::CORBA::Boolean t) { return pd_obj->switchServo(t); }
  ::CORBA::Boolean getServoStatus(armServer::LngArray15 status) { return pd_obj->getServoStatus(status); }
  void protectiveStop(const armServer::LngArray4 inputID, armServer::LngArray4 outputID) { pd_obj->protectiveStop(inputID, outputID); }
  void exitProtectiveStop(const armServer::LngArray4 inputID, armServer::LngArray4 outputID) { pd_obj->exitProtectiveStop(inputID, outputID); }
  ::CORBA::Boolean motionCancel(::CORBA::Octet& part) { return pd_obj->motionCancel(part); }
  ::CORBA::ULong setOffsetRightHand(::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z) { return pd_obj->setOffsetRightHand(x, y, z); }
  void getOffsetRightHand(::CORBA::Double& x, ::CORBA::Double& y, ::CORBA::Double& z) { pd_obj->getOffsetRightHand(x, y, z); }
  ::CORBA::ULong setOffsetLeftHand(::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z) { return pd_obj->setOffsetLeftHand(x, y, z); }
  void getOffsetLeftHand(::CORBA::Double& x, ::CORBA::Double& y, ::CORBA::Double& z) { pd_obj->getOffsetLeftHand(x, y, z); }
  ::CORBA::ULong setOffsetRightHandEx(::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z, ::CORBA::Double r, ::CORBA::Double p, ::CORBA::Double w) { return pd_obj->setOffsetRightHandEx(x, y, z, r, p, w); }
  void getOffsetRightHandEx(::CORBA::Double& x, ::CORBA::Double& y, ::CORBA::Double& z, ::CORBA::Double& r, ::CORBA::Double& p, ::CORBA::Double& w) { pd_obj->getOffsetRightHandEx(x, y, z, r, p, w); }
  ::CORBA::ULong setOffsetLeftHandEx(::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z, ::CORBA::Double r, ::CORBA::Double p, ::CORBA::Double w) { return pd_obj->setOffsetLeftHandEx(x, y, z, r, p, w); }
  void getOffsetLeftHandEx(::CORBA::Double& x, ::CORBA::Double& y, ::CORBA::Double& z, ::CORBA::Double& r, ::CORBA::Double& p, ::CORBA::Double& w) { pd_obj->getOffsetLeftHandEx(x, y, z, r, p, w); }
  ::CORBA::Boolean inMotion(::CORBA::Octet& part, ::CORBA::Boolean wait) { return pd_obj->inMotion(part, wait); }
  ::CORBA::Double setAngleChestP(::CORBA::Double y, ::CORBA::Double percent, ::CORBA::ULong& status) { return pd_obj->setAngleChestP(y, percent, status); }
  ::CORBA::Double setAnglesNeckP(::CORBA::Double y, ::CORBA::Double p, ::CORBA::Double percent, ::CORBA::ULong& status) { return pd_obj->setAnglesNeckP(y, p, percent, status); }
  ::CORBA::Double setJointAnglesRightArmP(::CORBA::Double j0, ::CORBA::Double j1, ::CORBA::Double j2, ::CORBA::Double j3, ::CORBA::Double j4, ::CORBA::Double j5, ::CORBA::Double percent, ::CORBA::ULong& status) { return pd_obj->setJointAnglesRightArmP(j0, j1, j2, j3, j4, j5, percent, status); }
  ::CORBA::Double setJointAnglesLeftArmP(::CORBA::Double j0, ::CORBA::Double j1, ::CORBA::Double j2, ::CORBA::Double j3, ::CORBA::Double j4, ::CORBA::Double j5, ::CORBA::Double percent, ::CORBA::ULong& status) { return pd_obj->setJointAnglesLeftArmP(j0, j1, j2, j3, j4, j5, percent, status); }
  ::CORBA::Double setTargetRightArmP(::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z, ::CORBA::Double r, ::CORBA::Double p, ::CORBA::Double w, ::CORBA::Double percent, ::CORBA::ULong& status) { return pd_obj->setTargetRightArmP(x, y, z, r, p, w, percent, status); }
  ::CORBA::Double setTargetLeftArmP(::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z, ::CORBA::Double r, ::CORBA::Double p, ::CORBA::Double w, ::CORBA::Double percent, ::CORBA::ULong& status) { return pd_obj->setTargetLeftArmP(x, y, z, r, p, w, percent, status); }
  ::CORBA::Double seqTargetRightArmP(::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z, ::CORBA::Double r, ::CORBA::Double p, ::CORBA::Double w, ::CORBA::Double percent, ::CORBA::ULong& status) { return pd_obj->seqTargetRightArmP(x, y, z, r, p, w, percent, status); }
  ::CORBA::Double seqTargetLeftArmP(::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z, ::CORBA::Double r, ::CORBA::Double p, ::CORBA::Double w, ::CORBA::Double percent, ::CORBA::ULong& status) { return pd_obj->seqTargetLeftArmP(x, y, z, r, p, w, percent, status); }
  ::CORBA::Double setTargetRightArmMatrixP(const OpenHRP::DblArray9 rotMatrix, const OpenHRP::DblArray3 offset, ::CORBA::Double percent, ::CORBA::ULong& status) { return pd_obj->setTargetRightArmMatrixP(rotMatrix, offset, percent, status); }
  ::CORBA::Double setTargetLeftArmMatrixP(const OpenHRP::DblArray9 rotMatrix, const OpenHRP::DblArray3 offset, ::CORBA::Double percent, ::CORBA::ULong& status) { return pd_obj->setTargetLeftArmMatrixP(rotMatrix, offset, percent, status); }
  ::CORBA::Double seqTargetRightArmMatrixP(const OpenHRP::DblArray9 rotMatrix, const OpenHRP::DblArray3 offset, ::CORBA::Double percent, ::CORBA::ULong& status) { return pd_obj->seqTargetRightArmMatrixP(rotMatrix, offset, percent, status); }
  ::CORBA::Double seqTargetLeftArmMatrixP(const OpenHRP::DblArray9 rotMatrix, const OpenHRP::DblArray3 offset, ::CORBA::Double percent, ::CORBA::ULong& status) { return pd_obj->seqTargetLeftArmMatrixP(rotMatrix, offset, percent, status); }
  void getJointAngleChest(::CORBA::Double& y) { pd_obj->getJointAngleChest(y); }
  void getJointAngleChestReal(::CORBA::Double& y) { pd_obj->getJointAngleChestReal(y); }
  void getJointAngleChestGoal(::CORBA::Double& y) { pd_obj->getJointAngleChestGoal(y); }
  void getJointAnglesNeck(::CORBA::Double& y, ::CORBA::Double& p) { pd_obj->getJointAnglesNeck(y, p); }
  void getJointAnglesNeckReal(::CORBA::Double& y, ::CORBA::Double& p) { pd_obj->getJointAnglesNeckReal(y, p); }
  void getJointAnglesRightArm(::CORBA::Double& j00, ::CORBA::Double& j11, ::CORBA::Double& j22, ::CORBA::Double& j33, ::CORBA::Double& j44, ::CORBA::Double& j55) { pd_obj->getJointAnglesRightArm(j00, j11, j22, j33, j44, j55); }
  void getJointAnglesRightArmReal(::CORBA::Double& j00, ::CORBA::Double& j11, ::CORBA::Double& j22, ::CORBA::Double& j33, ::CORBA::Double& j44, ::CORBA::Double& j55) { pd_obj->getJointAnglesRightArmReal(j00, j11, j22, j33, j44, j55); }
  void getJointAnglesLeftArm(::CORBA::Double& j00, ::CORBA::Double& j11, ::CORBA::Double& j22, ::CORBA::Double& j33, ::CORBA::Double& j44, ::CORBA::Double& j55) { pd_obj->getJointAnglesLeftArm(j00, j11, j22, j33, j44, j55); }
  void getJointAnglesLeftArmReal(::CORBA::Double& j00, ::CORBA::Double& j11, ::CORBA::Double& j22, ::CORBA::Double& j33, ::CORBA::Double& j44, ::CORBA::Double& j55) { pd_obj->getJointAnglesLeftArmReal(j00, j11, j22, j33, j44, j55); }
  void getPositionRightArm(::CORBA::Double& x, ::CORBA::Double& y, ::CORBA::Double& z, ::CORBA::Double& r, ::CORBA::Double& p, ::CORBA::Double& w) { pd_obj->getPositionRightArm(x, y, z, r, p, w); }
  void getPositionRightArmReal(::CORBA::Double& x, ::CORBA::Double& y, ::CORBA::Double& z, ::CORBA::Double& r, ::CORBA::Double& p, ::CORBA::Double& w) { pd_obj->getPositionRightArmReal(x, y, z, r, p, w); }
  void getPositionLeftArm(::CORBA::Double& x, ::CORBA::Double& y, ::CORBA::Double& z, ::CORBA::Double& r, ::CORBA::Double& p, ::CORBA::Double& w) { pd_obj->getPositionLeftArm(x, y, z, r, p, w); }
  void getPositionLeftArmReal(::CORBA::Double& x, ::CORBA::Double& y, ::CORBA::Double& z, ::CORBA::Double& r, ::CORBA::Double& p, ::CORBA::Double& w) { pd_obj->getPositionLeftArmReal(x, y, z, r, p, w); }
  void getPositionRightArmMatrix(OpenHRP::DblArray9 rotMatrix, OpenHRP::DblArray3 offset) { pd_obj->getPositionRightArmMatrix(rotMatrix, offset); }
  void getPositionRightArmMatrixReal(OpenHRP::DblArray9 rotMatrix, OpenHRP::DblArray3 offset) { pd_obj->getPositionRightArmMatrixReal(rotMatrix, offset); }
  void getPositionLeftArmMatrix(OpenHRP::DblArray9 rotMatrix, OpenHRP::DblArray3 offset) { pd_obj->getPositionLeftArmMatrix(rotMatrix, offset); }
  void getPositionLeftArmMatrixReal(OpenHRP::DblArray9 rotMatrix, OpenHRP::DblArray3 offset) { pd_obj->getPositionLeftArmMatrixReal(rotMatrix, offset); }
  ::CORBA::Boolean jointAnglesFromConfigurationRight(::CORBA::Double chest, ::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z, ::CORBA::Double r, ::CORBA::Double p, ::CORBA::Double w, ::CORBA::Double& j00, ::CORBA::Double& j11, ::CORBA::Double& j22, ::CORBA::Double& j33, ::CORBA::Double& j44, ::CORBA::Double& j55, ::CORBA::Long& maxIK) { return pd_obj->jointAnglesFromConfigurationRight(chest, x, y, z, r, p, w, j00, j11, j22, j33, j44, j55, maxIK); }
  ::CORBA::Boolean jointAnglesFromConfigurationLeft(::CORBA::Double chest, ::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z, ::CORBA::Double r, ::CORBA::Double p, ::CORBA::Double w, ::CORBA::Double& j00, ::CORBA::Double& j11, ::CORBA::Double& j22, ::CORBA::Double& j33, ::CORBA::Double& j44, ::CORBA::Double& j55, ::CORBA::Long& maxIK) { return pd_obj->jointAnglesFromConfigurationLeft(chest, x, y, z, r, p, w, j00, j11, j22, j33, j44, j55, maxIK); }
  ::CORBA::Boolean configurationFromJointAnglesRight(::CORBA::Double j00, ::CORBA::Double j11, ::CORBA::Double j22, ::CORBA::Double j33, ::CORBA::Double j44, ::CORBA::Double j55, ::CORBA::Double j66, ::CORBA::Double& x, ::CORBA::Double& y, ::CORBA::Double& z, ::CORBA::Double& r, ::CORBA::Double& p, ::CORBA::Double& w) { return pd_obj->configurationFromJointAnglesRight(j00, j11, j22, j33, j44, j55, j66, x, y, z, r, p, w); }
  ::CORBA::Boolean configurationFromJointAnglesLeft(::CORBA::Double j00, ::CORBA::Double j11, ::CORBA::Double j22, ::CORBA::Double j33, ::CORBA::Double j44, ::CORBA::Double j55, ::CORBA::Double j66, ::CORBA::Double& x, ::CORBA::Double& y, ::CORBA::Double& z, ::CORBA::Double& r, ::CORBA::Double& p, ::CORBA::Double& w) { return pd_obj->configurationFromJointAnglesLeft(j00, j11, j22, j33, j44, j55, j66, x, y, z, r, p, w); }
  void getIDLVersionString(::CORBA::String_out revision, ::CORBA::String_out date) { pd_obj->getIDLVersionString(revision, date); }
  void getSrcVersionString(::CORBA::String_out revision, ::CORBA::String_out date) { pd_obj->getSrcVersionString(revision, date); }


private:
  _omniT*                   pd_obj;
  ::PortableServer::POA_ptr pd_poa;
  _CORBA_Boolean            pd_rel;
};



#undef _core_attr
#undef _dyn_attr



inline void
armServer::_marshalObjRef(::armServer_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_armServer
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_armServer
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_armServer
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_armServer
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_armServer
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_armServer
#endif

#endif  // __armServer_hh__

