// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __hiroCommonStatus_hh__
#define __hiroCommonStatus_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_hiroCommonStatus
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_hiroCommonStatus
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_hiroCommonStatus
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE hiroCommonStatus

_CORBA_MODULE_BEG

  typedef ::CORBA::Short statusType;
  typedef ::CORBA::Short_out statusType_out;

  class statSequence_var;

  class statSequence : public _CORBA_Unbounded_Sequence_w_FixSizeElement< statusType, 2, 2 >  {
  public:
    typedef statSequence_var _var_type;
    inline statSequence() {}
    inline statSequence(const statSequence& _s)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< statusType, 2, 2 > (_s) {}

    inline statSequence(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< statusType, 2, 2 > (_max) {}
    inline statSequence(_CORBA_ULong _max, _CORBA_ULong _len, statusType* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< statusType, 2, 2 > (_max, _len, _val, _rel) {}

  

    inline statSequence& operator = (const statSequence& _s) {
      _CORBA_Unbounded_Sequence_w_FixSizeElement< statusType, 2, 2 > ::operator=(_s);
      return *this;
    }
  };

  class statSequence_out;

  class statSequence_var {
  public:
    inline statSequence_var() : _pd_seq(0) {}
    inline statSequence_var(statSequence* _s) : _pd_seq(_s) {}
    inline statSequence_var(const statSequence_var& _s) {
      if( _s._pd_seq )  _pd_seq = new statSequence(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~statSequence_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline statSequence_var& operator = (statSequence* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline statSequence_var& operator = (const statSequence_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new statSequence;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline statusType& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline statSequence* operator -> () { return _pd_seq; }
    inline const statSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator statSequence& () const { return *_pd_seq; }
#else
    inline operator const statSequence& () const { return *_pd_seq; }
    inline operator statSequence& () { return *_pd_seq; }
#endif
      
    inline const statSequence& in() const { return *_pd_seq; }
    inline statSequence&       inout()    { return *_pd_seq; }
    inline statSequence*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline statSequence* _retn() { statSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class statSequence_out;
    
  private:
    statSequence* _pd_seq;
  };

  class statSequence_out {
  public:
    inline statSequence_out(statSequence*& _s) : _data(_s) { _data = 0; }
    inline statSequence_out(statSequence_var& _s)
      : _data(_s._pd_seq) { _s = (statSequence*) 0; }
    inline statSequence_out(const statSequence_out& _s) : _data(_s._data) {}
    inline statSequence_out& operator = (const statSequence_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline statSequence_out& operator = (statSequence* _s) {
      _data = _s;
      return *this;
    }
    inline operator statSequence*&()  { return _data; }
    inline statSequence*& ptr()       { return _data; }
    inline statSequence* operator->() { return _data; }

    inline statusType& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    statSequence*& _data;

  private:
    statSequence_out();
    statSequence_out& operator=(const statSequence_var&);
  };

  _CORBA_MODULE_VARINT const ::CORBA::Short ANGLE_UPPER_LIMIT_ERROR _init_in_decl_( = 1 );

  _CORBA_MODULE_VARINT const ::CORBA::Short ANGLE_LOWER_LIMIT_ERROR _init_in_decl_( = 2 );

  _CORBA_MODULE_VARINT const ::CORBA::Short INVERSE_KINEMA_ERROR _init_in_decl_( = 3 );

  _CORBA_MODULE_VARINT const ::CORBA::Short IN_VALUE_LENGTH_ERROR _init_in_decl_( = 16 );

  _CORBA_MODULE_VARINT const ::CORBA::Short IN_1_VALUE_LENGTH_ERROR _init_in_decl_( = 17 );

  _CORBA_MODULE_VARINT const ::CORBA::Short IN_2_VALUE_LENGTH_ERROR _init_in_decl_( = 18 );

  _CORBA_MODULE_VARINT const ::CORBA::Short IN_3_VALUE_LENGTH_ERROR _init_in_decl_( = 19 );

  _CORBA_MODULE_VARINT const ::CORBA::Short IN_4_VALUE_LENGTH_ERROR _init_in_decl_( = 20 );

  _CORBA_MODULE_VARINT const ::CORBA::Short IN_5_VALUE_LENGTH_ERROR _init_in_decl_( = 21 );

  _CORBA_MODULE_VARINT const ::CORBA::Short IN_6_VALUE_LENGTH_ERROR _init_in_decl_( = 22 );

  _CORBA_MODULE_VARINT const ::CORBA::Short IN_7_VALUE_LENGTH_ERROR _init_in_decl_( = 23 );

  _CORBA_MODULE_VARINT const ::CORBA::Short IN_8_VALUE_LENGTH_ERROR _init_in_decl_( = 24 );

  _CORBA_MODULE_VARINT const ::CORBA::Short IN_9_VALUE_LENGTH_ERROR _init_in_decl_( = 25 );

  _CORBA_MODULE_VARINT const ::CORBA::Short IN_10_VALUE_LENGTH_ERROR _init_in_decl_( = 26 );

  _CORBA_MODULE_VARINT const ::CORBA::Short IN_11_VALUE_LENGTH_ERROR _init_in_decl_( = 27 );

  _CORBA_MODULE_VARINT const ::CORBA::Short IN_12_VALUE_LENGTH_ERROR _init_in_decl_( = 28 );

  _CORBA_MODULE_VARINT const ::CORBA::Short IN_13_VALUE_LENGTH_ERROR _init_in_decl_( = 29 );

  _CORBA_MODULE_VARINT const ::CORBA::Short IN_14_VALUE_LENGTH_ERROR _init_in_decl_( = 30 );

  _CORBA_MODULE_VARINT const ::CORBA::Short IN_15_VALUE_LENGTH_ERROR _init_in_decl_( = 31 );

  _CORBA_MODULE_VARINT const ::CORBA::Short IN_KIND_ERROR _init_in_decl_( = 4096 );

  _CORBA_MODULE_VARINT const ::CORBA::Short OUT_KIND_ERROR _init_in_decl_( = 4097 );

  _CORBA_MODULE_VARINT const ::CORBA::Short JOINT_NUM_ERROR _init_in_decl_( = 4098 );

  _CORBA_MODULE_VARINT const ::CORBA::Short PART_NUM_ERROR _init_in_decl_( = 4099 );

  _CORBA_MODULE_VARINT const ::CORBA::Short PLUGIN_NAME_ERROR _init_in_decl_( = 4100 );

  _CORBA_MODULE_VARINT const ::CORBA::Short KIND_ERROR _init_in_decl_( = 8192 );

  _CORBA_MODULE_VARINT const ::CORBA::Short VALUE_ZERO_ERROR _init_in_decl_( = 8193 );

  _CORBA_MODULE_VARINT const ::CORBA::Short MISSMATCH_ERROR _init_in_decl_( = 8194 );

  _CORBA_MODULE_VARINT const ::CORBA::Short INI_JOINT_ERROR _init_in_decl_( = 8195 );

  _CORBA_MODULE_VARINT const ::CORBA::Short VALUE_JOINT_ERROR _init_in_decl_( = 8196 );

  _CORBA_MODULE_VARINT const ::CORBA::Short FIRST_TIME_ERROR _init_in_decl_( = 8197 );

  _CORBA_MODULE_VARINT const ::CORBA::Short OTHER_MOTION_ERROR _init_in_decl_( = 8198 );

  _CORBA_MODULE_VARINT const ::CORBA::Short TIME_CHANGE_WARNING _init_in_decl_( = 8199 );

  _CORBA_MODULE_VARINT const ::CORBA::Short FIRST_POINT_ERROR _init_in_decl_( = 8200 );

  _CORBA_MODULE_VARINT const ::CORBA::Short FALL_ON_JOINT_ERROR _init_in_decl_( = 8201 );

  _CORBA_MODULE_VARINT const ::CORBA::Short SPEED_ZERO_ERROR _init_in_decl_( = 8202 );

  _CORBA_MODULE_VARINT const ::CORBA::Short PROTECTIVE_STOP_ERROR _init_in_decl_( = 8203 );

  _CORBA_MODULE_VARINT const ::CORBA::Short SERVO_STATUS_ERROR _init_in_decl_( = 12288 );

  _CORBA_MODULE_VARINT const ::CORBA::Short NO_CONTENTS_SEQ_ERROR _init_in_decl_( = 12289 );

  _CORBA_MODULE_VARINT const ::CORBA::Short SAME_JOINT_SEQ_ERROR _init_in_decl_( = 12290 );

  _CORBA_MODULE_VARINT const ::CORBA::Short NOT_SPECIFIED_JOINT_ERROR _init_in_decl_( = 12291 );

  _CORBA_MODULE_VARINT const ::CORBA::Short UNKNOWN_JOINT_ERROR _init_in_decl_( = 12292 );

  _CORBA_MODULE_VARINT const ::CORBA::Short INPUT_ANGLE_ERROR _init_in_decl_( = 12293 );

  _CORBA_MODULE_VARINT const ::CORBA::Short CALIB_ANGLE_ERROR _init_in_decl_( = 12294 );

  _CORBA_MODULE_VARINT const ::CORBA::Short RE_CALIBRATION _init_in_decl_( = 12295 );

  _CORBA_MODULE_VARINT const ::CORBA::Short EMERGENCY_ERROR _init_in_decl_( = 12296 );

  _CORBA_MODULE_VARINT const ::CORBA::Short MOVE_FOR_ZPOS_ERROR _init_in_decl_( = 12299 );

  _CORBA_MODULE_VARINT const ::CORBA::Short CALIBRATION_ERROR _init_in_decl_( = 12300 );

  _CORBA_MODULE_VARINT const ::CORBA::Short SERVO_ON_ERROR _init_in_decl_( = 12301 );

  _CORBA_MODULE_VARINT const ::CORBA::Short GET_MC_ERROR _init_in_decl_( = 12302 );

  _CORBA_MODULE_VARINT const ::CORBA::Short MOVE_TO_CALIB_SERVO_ERROR _init_in_decl_( = 16385 );

  _CORBA_MODULE_VARINT const ::CORBA::Short MOVE_TO_CALIB_ERROR _init_in_decl_( = 20481 );

_CORBA_MODULE_END



_CORBA_MODULE POA_hiroCommonStatus
_CORBA_MODULE_BEG

_CORBA_MODULE_END



_CORBA_MODULE OBV_hiroCommonStatus
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr





#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_hiroCommonStatus
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_hiroCommonStatus
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_hiroCommonStatus
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_hiroCommonStatus
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_hiroCommonStatus
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_hiroCommonStatus
#endif

#endif  // __hiroCommonStatus_hh__

