// -*- mode: idl; indent-tabs-mode: t; c-basic-offset: 4; -*-
/*!
 * @file      jointAnglePlugin.idl
 * @brief     双腕ロボット用　関節補間モーション生成 インターフェース 定義ファイル
 *
 */
#ifndef __JOINT_ANGLE_PLUGIN_IDL__
#define __JOINT_ANGLE_PLUGIN_IDL__

#include "HRPcontroller.idl"
#include "statusPlugin.idl"

/*!
 * @brief @a jointAnglePlugin で使用する型・定数
 */
module jointAnglePluginTypes
{
    /*!
	 * @ingroup jointAnglePluginGroup_Ref
     * @brief 複数軸番号の受け渡しに使用します。
     *
	 * 　
     */
	typedef sequence<long long> Nums;

    /*!
	 * @ingroup jointAnglePluginGroup_Ref
     * @brief ステータスを返す時に使用します。
	 *
	 * 　
     */
	typedef sequence<unsigned long> StatusType;
};

/*!
 * @brief 関節補間モーションを生成するインターフェース
 */
interface jointAnglePlugin : OpenHRP::Plugin
{
	/*!
	 * @addtogroup jointAnglePluginGroup_Ref jointAnglePlugin
	 */

    /*!
	 * @ingroup jointAnglePluginGroup_Ref
     * @brief ロボット座標系指定で関節補間モーションを生成します。
     *
     * @param[in]    kind             動作部位＋単位系\n
	 *                                - (K_RARM + K_EULER  + K_MM_DEG) : 右腕 (chest, x,y,z, r,p,w) [mm, deg] \n
	 *                                - (K_LARM + K_EULER  + K_MM_DEG) : 左腕 (chest, x,y,z, r,p,w) [mm, deg] \n
	 *                                - (K_RARM + K_QUATER + K_MM_DEG) : 右腕 (chest, x,y,z, queternion) [mm] \n
	 *                                - (K_LARM + K_QUATER + K_MM_DEG) : 左腕 (chest, x,y,z, queternion) [mm] \n
	 *                                - (K_RARM + K_MATRIX + K_MM_DEG) : 右腕 (chest, x,y,z, matrix) [mm] \n
	 *                                - (K_LARM + K_MATRIX + K_MM_DEG) : 左腕 (chest, x,y,z, matrix) [mm] \n
	 *                                - (K_RARM + K_EULER  + K_M_RAD)  : 右腕 (chest, x,y,z, r,p,w) [m, rad] \n
	 *                                - (K_LARM + K_EULER  + K_M_RAD)  : 左腕 (chest, x,y,z, r,p,w) [m, rad] \n
	 *                                - (K_RARM + K_QUATER + K_M_RAD)  : 右腕 (chest, x,y,z, queternion) [m] \n
	 *                                - (K_LARM + K_QUATER + K_M_RAD)  : 左腕 (chest, x,y,z, queternion) [m] \n
	 *                                - (K_RARM + K_MATRIX + K_M_RAD)  : 右腕 (chest, x,y,z, matrix) [m] \n
	 *                                - (K_LARM + K_MATRIX + K_M_RAD)  : 左腕 (chest, x,y,z, matrix) [m] \n
	 * \n
     * @param[in]    position         目標位置をロボット座標系で指定 \n
	 *                                単位系はkindに依存
     * @param[in]    minimumTime      最小移動時間[sec]
     * @param[in]    percent          最大速度に対する動作速度[%]
     * @param[out]   status           動作開始前に発生したステータスを返します。
     * 
     * ロボットが動作可能な最小時間＊percent と　minimumTime　とを比較して、
	 * より長い時間で動作します。
	 *
	 * percent = 100 とすることで、時間指令と同等の命令になります。 \n
	 * minimumTime = 0 とすることで、速度％指令と同等の命令になります。
	 *
	 * 腰軸−＞腕　の順番で動作させた時に、腰軸の動作時間を　minimumTime　に入れることで、
	 * 腰軸動作完了まで直線補間（その場停止も可）ができます。
	 *
     * @return         動作時間[sec]。 \n
     *                 エラーの場合，負値が返されます。
	 *
     * @par <例：腰軸が0°の状態で,(300,-400,200,0,-90,0)の位置に右手先を動かす>
     * @code
     * rbt.Joint.setPosition(10,(0,300,-400,200,0,-90,0),0,percent)
     * @endcode
	 *
     */
    double setPosition(
        in  statusPluginTypes::kindType     kind,
        in  statusPluginTypes::JointValues  position,
        in  double                          minimumTime,
        in  double                          percent,
        out hiroCommonStatus::statSequence  status
    );

    /*!
	 * @ingroup jointAnglePluginGroup_Ref
     * @brief 関節角度指定で関節補間モーションを生成します。
	 *
	 * jointNum[n]で指定した軸をjointAngles[n]で指定した角度に動作させます。
	 *
     * @param[in]    kind          設定したい状態を指定する。
     *                               - K_MM_DEG ： 角度指令値　［deg］\n
     *                               - K_M_RAD  ： 角度指令値　［rad］\n
	 *
     * @param[in]    jointNums     設定する軸番号を指定する。
     * @param[in]    jointAngles   設定したい角度列
     * @param[in]    minimumTime   最小移動時間[sec]
     * @param[in]    percent       最大速度に対する動作速度[%]
     * @param[out]   status        動作開始前に発生したステータスを返します。
     *
     * ロボットが動作可能な最小時間＊percent と　minimumTime　とを比較して、
	 * より長い時間で動作します。
	 *
	 * percent = 100 とすることで、時間指令と同等の命令になります。 \n
	 * minimumTime = 0 とすることで、速度％指令と同等の命令になります。
	 *
	 * 腰軸−＞腕　の順番で動作させた時に、腰軸の動作時間を　minimumTime　に入れることで、
	 * 腰軸動作完了まで直線補間（その場停止も可）ができます。
	 *
	 * 軸番号の順番は問いません。
	 * 軸番号が重なっていると、エラーになります。
	 *
     * @return         動作時間[sec]。 \n
     *                 エラーの場合，負値が返されます。
	 *
	 * @par <例：RSY:0°,RSP:-90°,REP:0°,RWY:15°,RWP:0°,RWR:0°の位置に右手先を動かす>
     * @code
     * rbt.Joint.setJointAngles(0,(3,4,5,6,7,8),(0,-90,0,15,0,0),0,percent)
     * @endcode
     *
     */
    double setJointAngles(
        in  statusPluginTypes::kindType     kind,
		in  jointAnglePluginTypes::Nums     jointNums,
        in  statusPluginTypes::JointValues  jointAngles,
        in  double                          minimumTime,
        in  double                          percent,
        out hiroCommonStatus::statSequence  status
    );
};

#endif

//EOF

