// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __jointAnglePlugin_hh__
#define __jointAnglePlugin_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_jointAnglePlugin
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_jointAnglePlugin
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_jointAnglePlugin
#endif



#ifndef __OpenHRPCommon_hh_EXTERNAL_GUARD__
#define __OpenHRPCommon_hh_EXTERNAL_GUARD__
#include <OpenHRPCommon.hpp>
#endif
#ifndef __HRPcontroller_hh_EXTERNAL_GUARD__
#define __HRPcontroller_hh_EXTERNAL_GUARD__
#include <HRPcontroller.hpp>
#endif
#ifndef __hiroCommonStatus_hh_EXTERNAL_GUARD__
#define __hiroCommonStatus_hh_EXTERNAL_GUARD__
#include <hiroCommonStatus.hpp>
#endif
#ifndef __statusPlugin_hh_EXTERNAL_GUARD__
#define __statusPlugin_hh_EXTERNAL_GUARD__
#include <statusPlugin.hpp>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE jointAnglePluginTypes

_CORBA_MODULE_BEG

  class Nums_var;

  class Nums : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::LongLong, 8, 8 >  {
  public:
    typedef Nums_var _var_type;
    inline Nums() {}
    inline Nums(const Nums& _s)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::LongLong, 8, 8 > (_s) {}

    inline Nums(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::LongLong, 8, 8 > (_max) {}
    inline Nums(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::LongLong* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::LongLong, 8, 8 > (_max, _len, _val, _rel) {}

  

    inline Nums& operator = (const Nums& _s) {
      _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::LongLong, 8, 8 > ::operator=(_s);
      return *this;
    }
  };

  class Nums_out;

  class Nums_var {
  public:
    inline Nums_var() : _pd_seq(0) {}
    inline Nums_var(Nums* _s) : _pd_seq(_s) {}
    inline Nums_var(const Nums_var& _s) {
      if( _s._pd_seq )  _pd_seq = new Nums(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~Nums_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline Nums_var& operator = (Nums* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline Nums_var& operator = (const Nums_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new Nums;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline ::CORBA::LongLong& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline Nums* operator -> () { return _pd_seq; }
    inline const Nums* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator Nums& () const { return *_pd_seq; }
#else
    inline operator const Nums& () const { return *_pd_seq; }
    inline operator Nums& () { return *_pd_seq; }
#endif
      
    inline const Nums& in() const { return *_pd_seq; }
    inline Nums&       inout()    { return *_pd_seq; }
    inline Nums*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline Nums* _retn() { Nums* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class Nums_out;
    
  private:
    Nums* _pd_seq;
  };

  class Nums_out {
  public:
    inline Nums_out(Nums*& _s) : _data(_s) { _data = 0; }
    inline Nums_out(Nums_var& _s)
      : _data(_s._pd_seq) { _s = (Nums*) 0; }
    inline Nums_out(const Nums_out& _s) : _data(_s._data) {}
    inline Nums_out& operator = (const Nums_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline Nums_out& operator = (Nums* _s) {
      _data = _s;
      return *this;
    }
    inline operator Nums*&()  { return _data; }
    inline Nums*& ptr()       { return _data; }
    inline Nums* operator->() { return _data; }

    inline ::CORBA::LongLong& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    Nums*& _data;

  private:
    Nums_out();
    Nums_out& operator=(const Nums_var&);
  };

  class StatusType_var;

  class StatusType : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 >  {
  public:
    typedef StatusType_var _var_type;
    inline StatusType() {}
    inline StatusType(const StatusType& _s)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_s) {}

    inline StatusType(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_max) {}
    inline StatusType(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::ULong* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_max, _len, _val, _rel) {}

  

    inline StatusType& operator = (const StatusType& _s) {
      _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > ::operator=(_s);
      return *this;
    }
  };

  class StatusType_out;

  class StatusType_var {
  public:
    inline StatusType_var() : _pd_seq(0) {}
    inline StatusType_var(StatusType* _s) : _pd_seq(_s) {}
    inline StatusType_var(const StatusType_var& _s) {
      if( _s._pd_seq )  _pd_seq = new StatusType(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~StatusType_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline StatusType_var& operator = (StatusType* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline StatusType_var& operator = (const StatusType_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new StatusType;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline ::CORBA::ULong& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline StatusType* operator -> () { return _pd_seq; }
    inline const StatusType* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator StatusType& () const { return *_pd_seq; }
#else
    inline operator const StatusType& () const { return *_pd_seq; }
    inline operator StatusType& () { return *_pd_seq; }
#endif
      
    inline const StatusType& in() const { return *_pd_seq; }
    inline StatusType&       inout()    { return *_pd_seq; }
    inline StatusType*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline StatusType* _retn() { StatusType* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class StatusType_out;
    
  private:
    StatusType* _pd_seq;
  };

  class StatusType_out {
  public:
    inline StatusType_out(StatusType*& _s) : _data(_s) { _data = 0; }
    inline StatusType_out(StatusType_var& _s)
      : _data(_s._pd_seq) { _s = (StatusType*) 0; }
    inline StatusType_out(const StatusType_out& _s) : _data(_s._data) {}
    inline StatusType_out& operator = (const StatusType_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline StatusType_out& operator = (StatusType* _s) {
      _data = _s;
      return *this;
    }
    inline operator StatusType*&()  { return _data; }
    inline StatusType*& ptr()       { return _data; }
    inline StatusType* operator->() { return _data; }

    inline ::CORBA::ULong& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    StatusType*& _data;

  private:
    StatusType_out();
    StatusType_out& operator=(const StatusType_var&);
  };

_CORBA_MODULE_END

#ifndef __jointAnglePlugin__
#define __jointAnglePlugin__

class jointAnglePlugin;
class _objref_jointAnglePlugin;
class _impl_jointAnglePlugin;

typedef _objref_jointAnglePlugin* jointAnglePlugin_ptr;
typedef jointAnglePlugin_ptr jointAnglePluginRef;

class jointAnglePlugin_Helper {
public:
  typedef jointAnglePlugin_ptr _ptr_type;

  static _ptr_type _nil();
  static _CORBA_Boolean is_nil(_ptr_type);
  static void release(_ptr_type);
  static void duplicate(_ptr_type);
  static void marshalObjRef(_ptr_type, cdrStream&);
  static _ptr_type unmarshalObjRef(cdrStream&);
};

typedef _CORBA_ObjRef_Var<_objref_jointAnglePlugin, jointAnglePlugin_Helper> jointAnglePlugin_var;
typedef _CORBA_ObjRef_OUT_arg<_objref_jointAnglePlugin,jointAnglePlugin_Helper > jointAnglePlugin_out;

#endif

// interface jointAnglePlugin
class jointAnglePlugin {
public:
  // Declarations for this interface type.
  typedef jointAnglePlugin_ptr _ptr_type;
  typedef jointAnglePlugin_var _var_type;

  static _ptr_type _duplicate(_ptr_type);
  static _ptr_type _narrow(::CORBA::Object_ptr);
  static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
  
  static _ptr_type _nil();

  static inline void _marshalObjRef(_ptr_type, cdrStream&);

  static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
    omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
    if (o)
      return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
    else
      return _nil();
  }

  static _core_attr const char* _PD_repoId;

  // Other IDL defined within this scope.
  
};

class _objref_jointAnglePlugin :
  public virtual OpenHRP::_objref_Plugin
{
public:
  ::CORBA::Double setPosition(statusPluginTypes::kindType kind, const statusPluginTypes::JointValues& position, ::CORBA::Double minimumTime, ::CORBA::Double percent, hiroCommonStatus::statSequence_out status);
  ::CORBA::Double setJointAngles(statusPluginTypes::kindType kind, const jointAnglePluginTypes::Nums& jointNums, const statusPluginTypes::JointValues& jointAngles, ::CORBA::Double minimumTime, ::CORBA::Double percent, hiroCommonStatus::statSequence_out status);

  inline _objref_jointAnglePlugin()  { _PR_setobj(0); }  // nil
  _objref_jointAnglePlugin(omniIOR*, omniIdentity*);

protected:
  virtual ~_objref_jointAnglePlugin();

  
private:
  virtual void* _ptrToObjRef(const char*);

  _objref_jointAnglePlugin(const _objref_jointAnglePlugin&);
  _objref_jointAnglePlugin& operator = (const _objref_jointAnglePlugin&);
  // not implemented

  friend class jointAnglePlugin;
};

class _pof_jointAnglePlugin : public _OMNI_NS(proxyObjectFactory) {
public:
  inline _pof_jointAnglePlugin() : _OMNI_NS(proxyObjectFactory)(jointAnglePlugin::_PD_repoId) {}
  virtual ~_pof_jointAnglePlugin();

  virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
  virtual _CORBA_Boolean is_a(const char*) const;
};

class _impl_jointAnglePlugin :
  public virtual OpenHRP::_impl_Plugin
{
public:
  virtual ~_impl_jointAnglePlugin();

  virtual ::CORBA::Double setPosition(statusPluginTypes::kindType kind, const statusPluginTypes::JointValues& position, ::CORBA::Double minimumTime, ::CORBA::Double percent, hiroCommonStatus::statSequence_out status) = 0;
  virtual ::CORBA::Double setJointAngles(statusPluginTypes::kindType kind, const jointAnglePluginTypes::Nums& jointNums, const statusPluginTypes::JointValues& jointAngles, ::CORBA::Double minimumTime, ::CORBA::Double percent, hiroCommonStatus::statSequence_out status) = 0;
  
public:  // Really protected, workaround for xlC
  virtual _CORBA_Boolean _dispatch(omniCallHandle&);

private:
  virtual void* _ptrToInterface(const char*);
  virtual const char* _mostDerivedRepoId();
  
};




_CORBA_MODULE POA_jointAnglePluginTypes
_CORBA_MODULE_BEG

_CORBA_MODULE_END

class POA_jointAnglePlugin :
  public virtual _impl_jointAnglePlugin,
  public virtual POA_OpenHRP::Plugin
{
public:
  virtual ~POA_jointAnglePlugin();

  inline ::jointAnglePlugin_ptr _this() {
    return (::jointAnglePlugin_ptr) _do_this(::jointAnglePlugin::_PD_repoId);
  }
};



_CORBA_MODULE OBV_jointAnglePluginTypes
_CORBA_MODULE_BEG

_CORBA_MODULE_END



template <class _omniT>
class POA_jointAnglePlugin_tie : public virtual POA_jointAnglePlugin
{
public:
  POA_jointAnglePlugin_tie(_omniT& t)
    : pd_obj(&t), pd_poa(0), pd_rel(0) {}
  POA_jointAnglePlugin_tie(_omniT& t, ::PortableServer::POA_ptr p)
    : pd_obj(&t), pd_poa(p), pd_rel(0) {}
  POA_jointAnglePlugin_tie(_omniT* t, _CORBA_Boolean r=1)
    : pd_obj(t), pd_poa(0), pd_rel(r) {}
  POA_jointAnglePlugin_tie(_omniT* t, ::PortableServer::POA_ptr p,_CORBA_Boolean r=1)
    : pd_obj(t), pd_poa(p), pd_rel(r) {}
  ~POA_jointAnglePlugin_tie() {
    if( pd_poa )  ::CORBA::release(pd_poa);
    if( pd_rel )  delete pd_obj;
  }

  _omniT* _tied_object() { return pd_obj; }

  void _tied_object(_omniT& t) {
    if( pd_rel )  delete pd_obj;
    pd_obj = &t;
    pd_rel = 0;
  }

  void _tied_object(_omniT* t, _CORBA_Boolean r=1) {
    if( pd_rel )  delete pd_obj;
    pd_obj = t;
    pd_rel = r;
  }

  _CORBA_Boolean _is_owner()        { return pd_rel; }
  void _is_owner(_CORBA_Boolean io) { pd_rel = io;   }

  ::PortableServer::POA_ptr _default_POA() {
    if( !pd_poa )  return ::PortableServer::POA::_the_root_poa();
    else           return ::PortableServer::POA::_duplicate(pd_poa);
  }

  ::CORBA::Double setPosition(statusPluginTypes::kindType kind, const statusPluginTypes::JointValues& position, ::CORBA::Double minimumTime, ::CORBA::Double percent, hiroCommonStatus::statSequence_out status) { return pd_obj->setPosition(kind, position, minimumTime, percent, status); }
  ::CORBA::Double setJointAngles(statusPluginTypes::kindType kind, const jointAnglePluginTypes::Nums& jointNums, const statusPluginTypes::JointValues& jointAngles, ::CORBA::Double minimumTime, ::CORBA::Double percent, hiroCommonStatus::statSequence_out status) { return pd_obj->setJointAngles(kind, jointNums, jointAngles, minimumTime, percent, status); }
  void start() { pd_obj->start(); }
  void stop() { pd_obj->stop(); }
  void sendMsg(const char* msg) { pd_obj->sendMsg(msg); }


private:
  _omniT*                   pd_obj;
  ::PortableServer::POA_ptr pd_poa;
  _CORBA_Boolean            pd_rel;
};



#undef _core_attr
#undef _dyn_attr



inline void
jointAnglePlugin::_marshalObjRef(::jointAnglePlugin_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_jointAnglePlugin
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_jointAnglePlugin
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_jointAnglePlugin
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_jointAnglePlugin
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_jointAnglePlugin
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_jointAnglePlugin
#endif

#endif  // __jointAnglePlugin_hh__

